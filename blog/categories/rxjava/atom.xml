<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RxJava | Neater]]></title>
  <link href="http://neater.github.io/blog/categories/rxjava/atom.xml" rel="self"/>
  <link href="http://neater.github.io/"/>
  <updated>2016-01-27T10:12:14+08:00</updated>
  <id>http://neater.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RxJava 具有副作用的方法（译）]]></title>
    <link href="http://neater.github.io/blog/2016/01/21/rxjavas-side-effect-methods/"/>
    <updated>2016-01-21T16:00:14+08:00</updated>
    <id>http://neater.github.io/blog/2016/01/21/rxjavas-side-effect-methods</id>
    <content type="html"><![CDATA[<p>RxJava 有许多方法可以把流中的数据项转化成需要的数据，它们是 RxJava 的核心，也是最吸引人的部分。与之对应的是，其它方法不更改流中的数据项，我称它们为副作用方法。</p>

<h3>副作用方法</h3>

<p>虽然副作用方法不影响流，但它们会在一些特定的事件中被调用，从而响应这些事件。比如：当一个被订阅的流产生错误的时候，可以 doOnError() 会被调用，这时把一些调试代码写在 doOnError() 里，就能知道到底发生了什么错误。</p>

<!--more-->


<p>```java
someObservable</p>

<pre><code>  .doOnError(new Action1() {
     @Override
     public void call(Throwable t) {
        // use this callback to clean up resources,
        // log the event or or report the
        // problem to the user
     }
  })
  //…
</code></pre>

<p>```</p>

<p>在 call() 方法的代码会在订阅者的 onError() 方法之前调用。除了异常事件，RxJava 提供了很多回调方法用来响应各种事件：</p>

<p><strong>副作用方法和事件的关系</strong>
<img src="http://neater.github.io/images/effect_methods.png" alt="effect methods" /></p>

<p>范型 T 在 doOnNext() 调用时表示数据的类型，在 doOnError() 调用时则是异常的类型。回调类型则有 Action0 和 Action1，说明这些回调方法没有返回值，没有或者只有一个参数。正因为没有返回值，它们不会在需要改变数据项时调用，它们适合在产生副作用的地方，比如保存数据到本地、清空状态值等等。</p>

<p>需要注意的是，这些副作用方法（doOnNext(), doOnCompleted() and so on）会返回 Observable，可以保持方法的链式调用。</p>

<h3>有什么用</h3>

<p>利用它们不更改流中的数据的特性，可以满足下面三种需求：</p>

<ul>
<li>doOnNext(): 调试</li>
<li>doOnError() in flatMap(): 错误处理</li>
<li>doOnNext(): 保存/缓存数据</li>
</ul>


<p>来看看详细用法。</p>

<h3>doOnNext(): 调试</h3>

<p>在使用 RxJava 的过程中，Observable 有时并不会像预期运行，尤其是刚上手的那段时间，这时特别想知道发生了什么。还有当你通过某些方便的转换方法，是不是想看看每个数据项转换后的结果。</p>

<p>我开始接触 RxJava 的时候只有一些 Java 流的经验，想必你也一样吧。使用内置的方法可以把流中的数据转换成另一种类型，如果转换过程出现问题了呢？</p>

<p>Java 8 Streaming 的 <strong>peek()</strong> 方法可以调试这个问题，当我开始使用 RxJava 时自然想用与之类似的方法，幸运的是有，事实上，它不仅如此！</p>

<p>可以在任何流发送的过程中调用 <strong>doOnNext()</strong> 查看流中的每项数据，代码如下：</p>

<p>```java
Observable someObservable = Observable</p>

<pre><code>        .from(Arrays.asList(new Integer[]{2, 3, 5, 7, 11}))
        .doOnNext(System.out::println)
        .filter(prime -&gt; prime % 2 == 0)
        .doOnNext(System.out::println)
        .count()
        .doOnNext(System.out::println)
        .map(number -&gt; String.format(“Contains %d elements”, number));
</code></pre>

<p>Subscription subscription = o.subscribe(</p>

<pre><code>        System.out::println,
        System.out::println,
        () -&gt; System.out.println(“Completed!”));
</code></pre>

<p>```</p>

<p>运行结果如下：</p>

<p><code>
2
3
3
5
5
7
7
11
11
4
Contains 4 elements
Completed!
</code>
这种方法可以查看数据的值，当流的数据不符合预期的时候特别有用。</p>

<p><strong>doOnError()</strong> 和 <strong>doOnCompleted()</strong> 也能用来调试。</p>

<p>如果你在开发 Android App 时使用了 RxJava，可以使用 <a href="https://github.com/android10/frodo">Frodo</a>（使用了注解）调试 Observables 和 Subscribers。具体用法可以参考 Fernando Ceja 的<a href="http://fernandocejas.com/2015/11/05/debugging-rxjava-on-android/">博客</a></p>

<p>尽管 <strong>doOnNext()</strong> 和 <strong>doOnError()</strong> 的使用会增加你的日志，并且会拖慢你的系统。:&ndash;)
当需要改变系统状态时，还是适用的，接着来看。</p>

<h3>flatMap() 中调用 doOnError()</h3>

<p>因为支持 RxJava，Retrofit 特别适合在网络请求时使用，而在数据请求链中会经常使用到 flatMap() 方法，是因为网络调用容易出错，特别是在移动设备上，但是出错时又不想停止数据调用链，这时唯一可用的就只有 <strong>onError()方法了</strong>。不过别忘了还有 <strong>flatMap()</strong>，在它里面调用 <strong>doOnError</strong>修改 UI 状态，还能进行出错后的数据处理，代码如下：</p>

<p>```java
flatMap(id &ndash;> service.getPost()</p>

<pre><code>   .doOnError(t -&gt; {
      // report problem to UI
   })
   .onErrorResumeNext(Observable.empty())
</code></pre>

<p>)
```</p>

<p>这种用法特别适合用来查看远程数据对 UI 状态的影响。</p>

<h3>使用 doOnNext() 保存/缓存网络数据</h3>

<p>如果在链式调用过程中有网络调用，可以使用 doOnNext() 把获得的数据存入数据库或者缓存起来。只需要几行简单的代码：</p>

<p>```java</p>

<p>// getOrderById is getting a fresh order
// from the net and returns an observable of orders
// Observable<Order> getOrderById(long id) {…}</p>

<p>Observable.from(aListWithIds)</p>

<pre><code>     .flatMap(id -&gt; getOrderById(id)
     .doOnNext(order -&gt; cacheOrder(order))
     // carry on with more processing
</code></pre>

<p>```</p>

<p>Daniel Lew 的 <a href="http://blog.danlew.net/2015/06/22/loading-data-from-multiple-sources-with-rxjava/">accessing multiple sources</a> 里，详细介绍了这种用法。</p>

<h3>小结</h3>

<p>正如上面所说，副作用方法有多种用途，虽然不能影响流中数据，但却能改变周边的环境状态。这让在某个时刻记录数据流变得很简单，更不用说把网络调用获得的数据存入数据库了。</p>

<p>接下来的博客，会进一步介绍 RxJava hook，敬请期待！</p>

<p>译自 <a href="http://www.grokkingandroid.com/rxjavas-side-effect-methods/">http://www.grokkingandroid.com/rxjavas-side-effect-methods/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava 在 Android 开发中的初次尝试（下）]]></title>
    <link href="http://neater.github.io/blog/2015/09/23/rxjava-zai-android-kai-fa-zhong-de-chu-ci-chang-shi-%28xia-%29/"/>
    <updated>2015-09-23T15:06:06+08:00</updated>
    <id>http://neater.github.io/blog/2015/09/23/rxjava-zai-android-kai-fa-zhong-de-chu-ci-chang-shi-(xia-)</id>
    <content type="html"><![CDATA[<p>这次我们来完成⎾RxJava 在 Android 开发中的初次尝试⏌的下半部分，在上次代码的基础上，用 RxJava 实现网络请求、多线程、AsyncTask。</p>

<p>在点击<code>Submit</code>按钮后，发起一次网络请求，可以用 Retrofit，对 RxJava 支持的很好，不过我不打算用他，我想用 RxJava 来模拟网络请求实现进度条的显示功能。</p>

<p>```java</p>

<pre><code>private void submit(InputValidation inputValidation) {
    request(inputValidation)
            .subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .doOnSubscribe(() -&gt; enableWidgets(false))
            .doOnCompleted(() -&gt; enableWidgets(true))
            .doOnError(throwable1 -&gt; enableWidgets(true))
            .subscribe(progressBar::setProgress
            );
}I
</code></pre>

<p><code>``
不过要注意的是，网络等需要多线程的代码需要调用</code>subscribeOn(Schedulers.io())<code>，不然会报 ANR 错误，还有要对界面进行操作需要调用</code>observeOn(AndroidSchedulers.mainThread())<code>，</code>doOn*`这一类方法会在更阶段进行回调，我把一些状态设置和显示的代码写在里面</p>

<p>```</p>

<pre><code>private void enableWidgets(boolean enable) {

    userName.setEnabled(enable);
    password.setEnabled(enable);
    confirmedPassword.setEnabled(enable);

    int visible = enable ? View.INVISIBLE : View.VISIBLE;
    progressBar.setVisibility(visible);

    String text = enable ? "end submit" : "begin submit";
    Snackbar.make(submitButton, text, Snackbar.LENGTH_SHORT).show();
}
</code></pre>

<p>```
模拟网络请求的代码：</p>

<p>```</p>

<pre><code>private Observable&lt;Integer&gt; request(InputValidation inputValidation) {
    return Observable.create(subscriber -&gt; {
        try {
            for (int i = 1; i &lt; 101; i++) {
                subscriber.onNext(i);
                Thread.currentThread().sleep(30);
            }
            subscriber.onCompleted();
        } catch (InterruptedException e) {
            e.printStackTrace();
            subscriber.onError(e);
        }
    });
}
</code></pre>

<p>```
把用户输入的代码移到 InputValidation.java 里，这里不贴代码了。最终效果：</p>

<p><img src="/images/progress.gif" alt="submit" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava 在 Android 开发中的初次尝试（上）]]></title>
    <link href="http://neater.github.io/blog/2015/07/22/rxjava-zai-android-kai-fa-zhong-de-yi-ci-chang-shi/"/>
    <updated>2015-07-22T10:01:35+08:00</updated>
    <id>http://neater.github.io/blog/2015/07/22/rxjava-zai-android-kai-fa-zhong-de-yi-ci-chang-shi</id>
    <content type="html"><![CDATA[<p>接触 RxJava 有一段时间了，写的都是一些小打小闹的 Sample 程序，不如就在实际项目中一试伸手。</p>

<p>许多 App 都有注册功能，当没有输入或者输入不符合业务逻辑时，会有错误提示。好点的用户体验应该是，只有当所有输入符合业务逻辑时，才会让注册按钮变成可点击状态，代码如下：</p>

<!--more-->


<p>```java
public class MainActivity extends Activity {</p>

<pre><code>@InjectView(R.id.user_name)
EditText userName;
@InjectView(R.id.password)
EditText password;
@InjectView(R.id.confirmedPassword)
EditText confirmedPassword;
@InjectView(R.id.submit_button)
Button submitButton;

private String userNameString;
private String passwordString;
private String confirmedPasswordString;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    ButterKnife.inject(this);

    addTextChangedListenners();
}

private void addTextChangedListenners() {

    userName.addTextChangedListener(new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

        }

        @Override
        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            userNameString = charSequence.toString();
            validateUserInput();
        }

        @Override
        public void afterTextChanged(Editable editable) {

        }
    });

    password.addTextChangedListener(new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

        }

        @Override
        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            passwordString = charSequence.toString();
            validateUserInput();

        }

        @Override
        public void afterTextChanged(Editable editable) {

        }
    });

    confirmedPassword.addTextChangedListener(new TextWatcher() {
        @Override
        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

        }

        @Override
        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            confirmedPasswordString = charSequence.toString();
            validateUserInput();
        }

        @Override
        public void afterTextChanged(Editable editable) {

        }
    });
}
private void validateUserInput() {

    boolean isUserNameValid = userNameString != null &amp;&amp; userNameString.trim().length() &gt; 2;
    boolean isPasswordValid = passwordString != null &amp;&amp; passwordString.trim().length() &gt; 3;
    boolean isPasswordEqual = confirmedPasswordSting != null &amp;&amp; confirmedPasswordSting.trim().equals(passwordString);
    boolean enable = isUserNameValid &amp;&amp; isPasswordValid &amp;&amp; isPasswordEqual;
    submitButton.setEnabled(enable);
}
</code></pre>

<p>}
```</p>

<p>用传统方法，实现起来费时费力、容易出错、难以维护，让我们开启响应式模式，用 RxJava 来实现，不过先上个流程图先。</p>

<p><img src="/images/flow.jpg" alt="flow" /></p>

<p>如图所示，在流中需要传递一个 model，为简化流程，用户名只规定长度大于2，密码长度大于3</p>

<p>```
public class InputValidation {</p>

<pre><code>private String userName;
private String password;
private String confirmedPassword;

public InputValidation(String userName, String password, String confirmedPassword) {
    this.userName = userName;
    this.password = password;
    this.confirmedPassword = confirmedPassword;
}

public boolean allowSubmit() {
    boolean isUserNameValid = userName.trim().length() &gt; 2;
    boolean isPasswordValid = password.trim().length() &gt; 3;
    boolean isPasswordEqual = confirmedPassword.trim().equals(password);
    boolean allowSubmit = isUserNameValid &amp;&amp; isPasswordValid &amp;&amp; isPasswordEqual;
    return allowSubmit;
}

public static String stringOfTextChangEvent(OnTextChangeEvent onTextChangeEvent) {
    return onTextChangeEvent.text().toString();
}
</code></pre>

<p>}
```</p>

<p>创建并转成字符串流，WidgetObservable.text 是 RxAndroid 提供的获取 EditText 输入文本的 API，map中传入的是转换方法的引用，这也是 Java8 才支持的。</p>

<p>```</p>

<pre><code>private void initRx() {
    Observable&lt;String&gt; userNameObservable = WidgetObservable.text(userName)
            .map(InputValidation::stringOfTextChangEvent);
    Observable&lt;String&gt; passwordObservable = WidgetObservable.text(password)
            .map(InputValidation::stringOfTextChangEvent);
    Observable&lt;String&gt; confirmedPasswordObservable = WidgetObservable.text(confirmedPassword)
            .map(InputValidation::stringOfTextChangEvent);
......
</code></pre>

<p>```</p>

<p>将三个输入流合并成一个，并根据验证结果设置提交按钮的状态。</p>

<p>```
&hellip;&hellip;</p>

<pre><code>    Observable&lt;InputValidation&gt; inputValidationObservable = Observable.combineLatest(
            userNameObservable,
            passwordObservable,
            confirmedPasswordObservable,
            InputValidation::new
    ).map(inputValidation -&gt; {
        submitButton.setEnabled(inputValidation.allowSubmit());
        return inputValidation;
    });
</code></pre>

<p>&hellip;&hellip;
```
combineLatest 的最后一个参数是个合并方法，我传入了个 Java8 支持的构造器引用。</p>

<p>```
&hellip;&hellip;</p>

<pre><code>    ViewObservable.clicks(submitButton).zipWith(
            inputValidationObservable,
            (onClickEvent, inputValidation) -&gt; inputValidation
    ).subscribe();
</code></pre>

<p>&hellip;&hellip;
```
最终结果：</p>

<p><img src="/images/submit.gif" alt="submit" /></p>

<p>在上面的代码中，起初调用的是 combineLatest，导制每次输入时，都会触发最终的 Observable，最后改用 zip 来合并，因为 zip 只有新的流出现，才会被触发，而 combineLatest 只要其中任意一个流有新数据，都会被触发，看图比较直观。</p>

<p>zip</p>

<p><img src="/images/zip.png" alt="zip" /></p>

<p>combineLatest</p>

<p><img src="/images/combineLatest.png" alt="combineLatest" /></p>

<p>用 RxJava 来写 App，代码更加清晰，大大降低了耦合度，使分离的逻辑形成链，让上帝的归上帝，凯撒的归凯撒，感觉就是一个字~~酸爽！</p>
]]></content>
  </entry>
  
</feed>
