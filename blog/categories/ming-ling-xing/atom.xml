<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 命令行 | Neater]]></title>
  <link href="http://neater.github.io/blog/categories/ming-ling-xing/atom.xml" rel="self"/>
  <link href="http://neater.github.io/"/>
  <updated>2016-04-10T16:01:26+08:00</updated>
  <id>http://neater.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CMD Tricks]]></title>
    <link href="http://neater.github.io/blog/2014/01/14/cmd-tricks/"/>
    <updated>2014-01-14T15:47:05+08:00</updated>
    <id>http://neater.github.io/blog/2014/01/14/cmd-tricks</id>
    <content type="html"><![CDATA[<h4>删除一个大文件</h4>

<p><code>
/path/to/file.log (清空)
rm /path/to/file.log
</code></p>

<h4>变量CDPATH定义了目录的搜索路径</h4>

<p>cd */var/www/html/ 这样长了，我可以直接输入下面的命令进入 /var/www/html</p>

<p><code>
export CDPATH=/var/www
cd html
</code></p>

<h4>输出文件的指定行</h4>

<p><code>
sed -n 'x,yp' file;   awk 'NF &gt; x &amp;&amp; NF &gt; y' file
</code>
从x行开始，输出y行</p>

<p><code>
tail +x file | head -y
</code>
head和tail 参数 -n的不同：</p>

<ul>
<li>head -n -10 除去最后10行</li>
<li>tail -n +10 从第10行开始</li>
<li>tail -n 1000：显示最后1000行；</li>
<li>tail -n +1000：从1000行开始显示，显示1000行以后的</li>
<li>head -n 1000：显示前面1000行</li>
</ul>


<p>从第3000行开始，显示1000行。即显示3000~3999行</p>

<p><code>
cat filename | tail -n +3000 | head -n 1000
</code>
显示1000行到3000行</p>

<p><code>
cat filename| head -n 3000 | tail -n +1000
</code></p>

<h4>Mac下获取UDID</h4>

<p>```
ioreg -w 0 -rc IOUSBDevice -k SupportsIPhoneOS | sed -n &rsquo;s/.<em>USB Serial Number[^0-9a-z]</em>([0-9a-z]<em>).</em>/\1/p'</p>

<p>system_profiler SPUSBDataType | sed -n -e &lsquo;/iPhone/,/Serial/p&rsquo; | grep &ldquo;Serial Number:&rdquo; | awk -F &ldquo;: &rdquo; &lsquo;{print $2}&rsquo;</p>

<p>system_profiler SPUSBDataType | grep &ldquo;Serial Number:.<em>&rdquo; | sed s#&ldquo;.</em>Serial Number: &rdquo;##
```</p>

<h4>清空文件</h4>

<p>```</p>

<blockquote><p>filename</p></blockquote>

<p>cat /dev/null > filename
<code>
给机器增加Load
</code>
cat /dev/nll/unandom | gzip -9 > /dev/null &amp;
```</p>

<hr />

<p>使用pgrep查找进程id，而不用 ps -ef | grep XXX</p>

<hr />

<p>echo $0，当前使用的 shell</p>

<p>vim打开剪贴板内容
<code>
alias vipb='xclip -selection clipboard -o | vim -' // Linux
alias vipb="pbpaste | vim -"    // Mac
</code>
显示sqlite文件内容
<code>
sqlite3 -line database.db
</code>
修改SSH的RSA密码短语
<code>
ssh-keygen -f ~/.ssh/id_rsa -p 修改SSH的RSA密码短语
</code>
man -w/&mdash;path
<code>
打印相关帮助文档的位置
</code>
使用-i参数默认的前面输出用{}代替，-I参数可以指定其他代替字符，如例子中的[]</p>

<p><code>
find . -name "file" | xargs -I [] cp []
</code>
查看某个选项的当前值</p>

<p><code>
:set option?
</code></p>

<h3>Readline Key Bindings(man bash中的查找字段)</h3>

<p>键盘宏命令</p>

<ul>
<li>开始录制宏 <code>ctrl + x (</code></li>
<li>结束录制宏 <code>ctrl + x )</code></li>
<li>运行宏 <code>ctrl + x e</code></li>
</ul>


<p>其他命令</p>

<ul>
<li>显示当前shell的版本信息 <code>ctrl + x ctrl + v</code></li>
<li>设置标记 <code>ctrl + @</code></li>
<li>交换标记和光标的位置: <code>ctrl + x ctrl + x</code></li>
<li>启动编辑器编辑命令，编辑完成后执行   <code>ctrl + x ctrl + e</code></li>
<li>撤销前面的操作 <code>ctrl + x ctrl + u</code></li>
<li>重新读取配置文件  <code>ctrl + x ctrl + r</code></li>
</ul>


<h3>Vimperator</h3>

<p>y: 复制当前页的url到剪贴板。Y：复制选中文字到剪贴板</p>

<h4>B显示书签列表</h4>

<p>:map B :dia bookmarks<cr></p>

<h4>Shell 随机数</h4>

<p><code>echo $RANDOM</code></p>

<h4>使用echo检查命令要操作的文件</h4>

<p><code>echo ls *</code>
<code>echo rm *.txt</code></p>

<h4>dryrun</h4>

<p>很多命令支持 dryrun(testing)，即 -n，作用与上面提到的 echo 相似</p>

<h4>撤销之前一次编辑操作</h4>

<p><code>ctrl + _</code></p>

<h4>Rapidly invoke an editor to write a long, complex, or tricky command</h4>

<p><code>ctrl x e</code></p>

<h4>与<code>ctrl a</code>相同，但再按一次会从新回到原位置</h4>

<p><code>ctrl x x</code></p>

<h4>回车</h4>

<p><code>ctrl o</code> 和 <code>ctrl m</code></p>

<h4>往右/左跳一个词</h4>

<p><code>esc f/b</code></p>

<h4>删除光标后的一个词</h4>

<p><code>esc d</code></p>

<h4>交换光标位置前的两个单词</h4>

<p><code>esc t</code></p>

<h4>当前位置至词尾，转成大/小写</h4>

<p><code>esc u/L</code></p>

<h3>ZSH</h3>

<p><code>⌘ + f</code>: 查找。支持正则。其中查找的内容会被自动复制。省去了再去⌘+c的步骤。同样，鼠标去选中的内容也会自动复制，也可以鼠标中键直接粘贴。一般在使用时，键入搜索关键词，然后用shift-tab或者tab左右自动补全，option + enter则自动将搜索结果键入，并且复制到剪贴板。</p>

<h4>Shell 使用 Vi 模式</h4>

<p><code>bindkey -v</code></p>

<h4>你也可以像 vim 一样映射你的 escape 键：</h4>

<pre><code>bindkey -M viins ‘jj’ vi-cmd-mode
</code></pre>
]]></content>
  </entry>
  
</feed>
