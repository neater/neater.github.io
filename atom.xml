<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Neater]]></title>
  <link href="http://neater.github.io/atom.xml" rel="self"/>
  <link href="http://neater.github.io/"/>
  <updated>2014-11-21T15:29:49+08:00</updated>
  <id>http://neater.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS开发最佳实践]]></title>
    <link href="http://neater.github.io/blog/2014/11/21/ioskai-fa-zui-jia-shi-jian/"/>
    <updated>2014-11-21T11:49:45+08:00</updated>
    <id>http://neater.github.io/blog/2014/11/21/ioskai-fa-zui-jia-shi-jian</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>译自：<a href="https://github.com/futurice/ios-good-practices">iOS Good Practices</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全栈开发者的潮起潮落]]></title>
    <link href="http://neater.github.io/blog/2014/11/11/quan-zhan-kai-fa-zhe-de-chao-qi-chao-luo/"/>
    <updated>2014-11-11T17:16:03+08:00</updated>
    <id>http://neater.github.io/blog/2014/11/11/quan-zhan-kai-fa-zhe-de-chao-qi-chao-luo</id>
    <content type="html"><![CDATA[<p>貌似今天的技术都迷恋全栈的开发者。全栈可能在Web2.0时代是可能的，但新一代的创业公司的涌现打破了许多限制。从机器智能预测推计算数据分析移动/可穿戴等等，全栈变得几乎不可能了。</p>

<p>上世纪70年代末至80年代初，还是孩子的我便开始为早期移动端和网站编程，那时独立开发一个软件是很普遍的，程序员和硬件之间也没有很多的层。在8位处理器和有限的内存环境下，程序员使用汇编语言尽可能地提升运行的性能和空间。</p>

<p>80年代末至90年代初，随着C/S模型的到来，很快软件开发演变成了一种团队合作，而90年代末至新世纪初的互联网浪潮则加速了这一进程。新进的技术进一步提高了复杂度，管理一个商业网站需要具备多种技能（比如前端、数据库、应用服务器等）的专业人员精通网络设备的操作、路由器和负载均衡原理、Java虚拟机调优、各种数据库的索引机制。</p>

<p>00年代中期开始，任何项目的开发成本都变的非常高，从简单的网站到新一代SaaS服务，这直接增加了开发中各个层之间的沟通成本甚至还会造成沟通障碍，项目中的层数也增加了不少，直接增加了部署的难度。 正如Marc Andreessen针对最近tweet的烧钱风波（译者猜测是狂招人吧）指出：开发人员的增加极大增加了沟通成本，只会导致效率的降低。</p>

<p>与之相反，新一代Web2.0技术变得日益简单和无缝。使用J2EE及Oracle的程序员切换到了更加一体化的LAMP（Linux, Apache, MySQL, PHP/Python/Perl）。新的语言及其框架（Django and Ruby on Rails）在网站和数据库之间封装相应的层来完成自动化。前端框架（jQuery）提供抽象层使开发者不用关心具体的浏览器。云服务（Amazon Web Services）简化部署并提供一致的网络。</p>

<p>00年代后期，许多程序员都能独自交付一个消费类或SaaS网站，包括动态网络客户端，以及负责商业逻辑的服务端，数据库的开发、布署以及运维。这新一代全栈开发者可以完全胜任需要过去一个团队才能完成的任务。当新加入的全线开发者为项目开发一个新的功能，将不可避免地涉及项目的各个层，</p>

<p><img src="https://tctechcrunch2011.files.wordpress.com/2014/10/image2.png?w=1248&amp;h=832" alt="skill1" /></p>

<p>如果你要使用上图中的技术来搭建网站，需要找到能够胜任的程序员。不久之后我觉得不切实际，因为这是并不是全栈开发者，下面的才是：
<img src="https://tctechcrunch2011.files.wordpress.com/2014/10/image-1.png?w=1248&amp;h=832" alt="skill2" /></p>

<p>我敢打赌，没人能精通所有这些领域，并开发相应的应用，因为要精通每一个领域及其API都是一个全职工作。</p>

<p>我们正处于复杂技术的变迁中，每个技术层都需要相关专家。开发Android&amp;iOS App需要理解各自平台的特性。使用Amazon的云服务运行一个应用，需要熟悉它的各种服务，才能应付各种事故。甚至前端技能的CSS都到了CSS4，JSON&amp;JavaScript也出现了MVC框架，Angular.js &amp; Backbone.js.</p>

<p>在这勇敢的新世界，一种人成为了关键，他除了精通至少一个层，还要能连接其余的层，并能和各层的专家合作开发新的功能并交付。换言之，他能够连接各个层以及设计整体的架构，这样的人很可能是一个或几个层的专家，相比全栈开发者，我们更需要全栈集成者。</p>

<p>安息吧，全栈开发者，我们应该欢迎全栈集成者，除了某些特殊领域需要具备高超技术的工程师外，软件使世界变得更加美好，其中自然少不了你们。</p>

<p>译自：
<a href="http://techcrunch.com/2014/11/08/the-rise-and-fall-of-the-full-stack-developer/">The Rise And Fall Of The Full Stack Developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tips]]></title>
    <link href="http://neater.github.io/blog/2014/09/29/git-tips/"/>
    <updated>2014-09-29T16:19:27+08:00</updated>
    <id>http://neater.github.io/blog/2014/09/29/git-tips</id>
    <content type="html"><![CDATA[<p>取消一次 git merge，比方说刚才执行了 git merge dev，发现各种崩溃，一大堆 conflict，想取消掉，那么就执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --merge dev </span></code></pre></td></tr></table></div></figure>


<p>显示某个作者的提交</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --name-status --author="[The Author's Name]" </span></code></pre></td></tr></table></div></figure>


<p>从仓库取出file覆盖当前分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout branch|tag|commit -- file_name</span></code></pre></td></tr></table></div></figure>


<p>从暂存区去除文件覆盖工作区</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- .</span></code></pre></td></tr></table></div></figure>


<h2>Branch</h2>

<p>查看各个分支最后一个提交对象的信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -v</span></code></pre></td></tr></table></div></figure>


<p>查看已经合并到当前分支的分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch --merge</span></code></pre></td></tr></table></div></figure>


<p>查看未合并到当前分支的分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch --no-merge</span></code></pre></td></tr></table></div></figure>


<p>基于dev新建test分支，并切换</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b test dev</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa and Swift]]></title>
    <link href="http://neater.github.io/blog/2014/09/24/reactivecocoa-and-swift/"/>
    <updated>2014-09-24T15:21:40+08:00</updated>
    <id>http://neater.github.io/blog/2014/09/24/reactivecocoa-and-swift</id>
    <content type="html"><![CDATA[<p>Swift可以和Objective-C相互调用，所以，在用Swift编写的App中，可以直接使用Reactivecocoa。</p>

<p>尽管如此，</p>

<h3>Signals in Swift</h3>

<p>通过桥接，ReactiveCocoa的API从Objective-C的块过渡到了Swift的闭包，来看一个例子，下面的Objective-C代码subscribe了UITextfield的<code>rac_textSignal</code>，用来查看当前的length。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self.searchTextField.rac_textSignal subscribeNext:^(id x) {
</span><span class='line'>  NSString *text = (NSString *)x;
</span><span class='line'>  NSLog(text);
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>当在这个UITextfield中依次输入0 1 2 3 4 5时，Console中显示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5</span></code></pre></td></tr></table></div></figure>


<p>当然了，为了避免显示转换，可以把上面的Block签名中的参数类型，从<code>id</code>改为<code>NSString</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self.searchTextField.rac_textSignal subscribeNext:^(NSString *text) {
</span><span class='line'>  NSLog(text);
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<p>与之对应的Swift代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>searchTextField.rac_textSignal().subscribeNext {
</span><span class='line'>  (next:AnyObject!) -&gt; () in
</span><span class='line'>  if let text = next as? String {
</span><span class='line'>    println(countElements(text))
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>不幸的是，当Swift和Objective-C进行调用的时候，会经常用到<code>as</code>操作符，从而变得更复杂了，我们不能进行显示转换，Swift生硬地插入了必须的类型为<code>(AnyObject!) -&gt; ()</code>的函数。</p>

<p>也可以使用<code>if-let</code>条件语句进行简化，因为<code>AnyObject</code>在当前情况下可以视为字符串。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>searchTextField.rac_textSignal().subscribeNext {
</span><span class='line'>  (next:AnyObject!) -&gt; () in
</span><span class='line'>  let text = next as String
</span><span class='line'>  println(countElements(text))
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>但是，这仍然还是要比Objective-C的版本复杂。
还好有解决这个问题的方案！针对<code>RACSignal</code>进行扩展，把传入函数参数类型进行必须的转换:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extension RACSignal {  
</span><span class='line'>  func subscribeNextAs&lt;T&gt;(nextClosure:(T) -&gt; ()) -&gt; () {
</span><span class='line'>    self.subscribeNext {
</span><span class='line'>      (next: AnyObject!) -&gt; () in
</span><span class='line'>      let nextAsT = next as T
</span><span class='line'>      nextClosure(nextAsT)
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面的代码使用泛型进行类型转换，参数T的类型通过实际传入的参数进行推断，这引出了一些有趣的语法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>searchTextField.rac_textSignal().subscribeNextAs {
</span><span class='line'>  (text:String) -&gt; () in
</span><span class='line'>  println(countElements(text))
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>好多了！</p>

<h3>Bindings</h3>

<p>ReactiveCocoa有一些宏用来绑定属性到signals，下面的代码，把viewModel的<code>searchText</code>属性绑定到一个UITextfield的<code>rac_textSignal</code>属性，当UITextfield中的内容更新了，这个signal忽略当前值，把新的值更新到viewModel的searchText</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RAC(self.viewModel, searchText) = self.searchTextField.rac_textSignal;</span></code></pre></td></tr></table></div></figure>


<p>Swift不支持宏，当然不能使用<code>RAC</code>了。
下面的struct和operator替代了RAC macro:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// a struct that replaces the RAC macro
</span><span class='line'>struct RAC  {
</span><span class='line'>  var target : NSObject!
</span><span class='line'>  var keyPath : String!
</span><span class='line'>  var nilValue : AnyObject!
</span><span class='line'>  
</span><span class='line'>  init(_ target: NSObject!, _ keyPath: String, nilValue: AnyObject? = nil) {
</span><span class='line'>    self.target = target
</span><span class='line'>    self.keyPath = keyPath
</span><span class='line'>    self.nilValue = nilValue
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  func assignSignal(signal : RACSignal) {
</span><span class='line'>    signal.setKeyPath(self.keyPath, onObject: self.target, nilValue: self.nilValue)
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>operator infix ~&gt; {}
</span><span class='line'>@infix func ~&gt; (signal: RACSignal, rac: RAC) {
</span><span class='line'>  rac.assignSignal(signal)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>searchTextField.rac_textSignal() ~&gt; RAC(viewModel, "searchText")</span></code></pre></td></tr></table></div></figure>


<p>重写<code>RACObserve</code>宏显得容易些</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func RACObserve(target: NSObject!, keyPath: String) -&gt; RACSignal  {
</span><span class='line'>  return target.rac_valuesForKeyPath(keyPath, observer: target)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Cool Stuff!</h3>

<p>我喜欢把已有的App移植一点一点地移植到Swift，为了减少Flickr的API调用，当photo显示一秒后，再调用相应的API获得相应的元数据(评论、点赞数)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// a signal that emits events when visibility changes
</span><span class='line'>let visibleStateChanged = RACObserve(self, "isVisible").skip(1)
</span><span class='line'>
</span><span class='line'>// filtered into visible and hidden signals
</span><span class='line'>let visibleSignal = visibleStateChanged.filter { $0.boolValue }
</span><span class='line'>let hiddenSignal = visibleStateChanged.filter { !$0.boolValue }
</span><span class='line'>
</span><span class='line'>// a signal that emits when an item has been visible for 1 second
</span><span class='line'>let fetchMetadata = visibleSignal.delay(1).takeUntil(hiddenSignal)
</span><span class='line'>
</span><span class='line'>fetchMetadata.subscribeNext {
</span><span class='line'>  // fetch the meta-data
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面的代码监听viewModel的<code>isVisible</code>属性，当photo显示或隐藏时产生信号来发出相应的事件，通过组合的方式，延时一秒后产生一个信号来获得元数据。酷！</p>

<h3>Conclusions</h3>

<p>把app从Objectiv-C移植到Swift是很有趣的，有些地方显得有些让人困惑，但我认为，一般说来Swift的这种编程范式将来会变得越来越容易。</p>

<p>译自 <a href="http://www.scottlogic.com/blog/2014/07/24/mvvm-reactivecocoa-swift.html">
MVVM, Swift and ReactiveCocoa &ndash; It&rsquo;s all good!
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100个iOS开发者需要关注的资源]]></title>
    <link href="http://neater.github.io/blog/2014/08/04/100ge-ioskai-fa-zhe-xu-yao-guan-zhu-de-zi-yuan/"/>
    <updated>2014-08-04T10:41:58+08:00</updated>
    <id>http://neater.github.io/blog/2014/08/04/100ge-ioskai-fa-zhe-xu-yao-guan-zhu-de-zi-yuan</id>
    <content type="html"><![CDATA[<p>iOS App的市场无疑获得了极大的增长，当然少不了平台流行的功劳。下面的的资源，对App开发感兴趣的人是很有帮助的。</p>

<p>无论是在App Store推广你的App，还是设计一款漂亮的App，这些书、工具、社区绝对能帮助你。这100多个在线服务、社区、工具，帮助开发者更好的构思一款App并实现它，你所要做的就是好好使用它们。</p>

<h3>在线服务</h3>

<p><img src="http://dailytekk.com/wp-content/uploads/2014/02/unbabel.jpg" alt="Service" /></p>

<ol>
<li><a href="http://www.iubenda.com/en/mobile">Iubenda</a> &ndash; Mobile app privacy policy</li>
<li><a href="http://www.joppar.com/mobile-app-cms">Content</a> -Content management system for native iOS apps</li>
<li><a href="https://www.unbabel.co/">Unbabel</a> &ndash; App Localization</li>
<li><a href="http://joppar.com/mobile-app-feature-switching">Switch</a> -Toggle your app features off and on in real-time</li>
<li><a href="https://heatmaps.io/">Heatmaps</a> &ndash; iOS heatmap</li>
<li><a href="http://www.iubenda.com/en/mobile">Bitbucket</a> &ndash; Private code repositories</li>
<li><a href="http://www.iubenda.com/en/mobile">Media Toolkit</a> &ndash; Monitors mentions of your app</li>
<li><a href="http://www.iubenda.com/en/mobile">Alau.me</a> &ndash; Like bit.ly for apps</li>
<li><a href="http://www.iubenda.com/en/mobile">Ap Salar</a> &ndash; Data driven mobile ad platform</li>
<li><a href="http://www.iubenda.com/en/mobile">Google</a> &ndash; Mobile backend</li>
</ol>


<h3>社区</h3>

<p><img src="http://dailytekk.com/wp-content/uploads/2014/02/F9brVEii2vJ1V8psswIKt6gmaE2SxFV9yLsyeuCbBqQ.jpg" alt="Communities" /></p>

<ol>
<li><a href="https://plus.google.com/communities/112026628790708717979">iOS Developers Group</a> &ndash; iOS Google+ community</li>
<li><a href="http://ios.meetup.com/">iOS Meetup Groups</a> &ndash; Get together with like-minded people</li>
<li><a href="https://www.quora.com/iOS-Development/">iOS Development Quora</a> &ndash; iOS Development Quora group</li>
<li><a href="http://stackoverflow.com/questions/tagged/ios">iOS Stackoverflow</a> &ndash; iOS Stackoverflow group</li>
<li><a href="http://forum.iphone-developers.com/">iPhone Developer Forum</a> &ndash; iOS Dev Forums</li>
<li><a href="http://www.reddit.com/r/iOSProgramming/">iOS Programming</a> &ndash; iOS Reddit group</li>
<li><a href="http://cocoalit.com/">Cocoa Lit</a> &ndash; List of Cocoa tutorials</li>
<li><a href="http://nsscreencast.com/">NS Screencast</a> &ndash; iOS development screencasts</li>
<li><a href="http://iosdevelopertips.com/">iOS Developer Tips</a> &ndash; Tips and tutorials for iOS Developers</li>
<li><a href="https://clarity.fm/">Clarity.fm</a> &ndash; Call an expert for iOS help</li>
</ol>


<p>译自
<a href="http://dailytekk.com/2014/02/20/100-great-resources-for-ios-developers/">100 Great Resources for iOS Developers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FLEX！iOS调试利器]]></title>
    <link href="http://neater.github.io/blog/2014/07/31/flex%21iosdiao-shi-li-qi/"/>
    <updated>2014-07-31T15:51:37+08:00</updated>
    <id>http://neater.github.io/blog/2014/07/31/flex!iosdiao-shi-li-qi</id>
    <content type="html"><![CDATA[<p>FLEX (Flipboard Explorer)是一系列集成在APP内部的用于iOS调试的工具集，以工具栏的形式显示在应用中，通过它，可以查看并修改几乎所有的APP运行状态。</p>

<p><img src="https://camo.githubusercontent.com/9986601c5e4306f7935032465911c0f70596e046/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f62617369632d766965772d6578706c6f726174696f6e2e676966" alt="dfd" /></p>

<h2>强大的调试能力</h2>

<ul>
<li>查看、修改View的层次关系。</li>
<li>查看对象的属性和实例变量。</li>
<li>动态修改属性和实例变量。</li>
<li>动态调用实例和类方法。</li>
<li>动态访问堆上的对象。</li>
<li>访问APP的沙盒。</li>
<li>除jAPP的所有类外，还能访问已链接的系统框架，包括私有的。</li>
<li>快速访问一些常用的对象，比如<code>[UIApplication sharedApplication]</code>、App Delegate、Root View Controller等。</li>
<li>动态查看、修改<code>NSUserDefaults</code>存储的值。</li>
</ul>


<p>和其它调试工具不同，FLEX完全运行在你的APP中，所以不需要连接到LLDB/Xcode或者远程调试的服务端，在模拟器和真机上都运行的很好。</p>

<h2>用法</h2>

<h3>简单版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[[</span><span class="n">FLEXManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="n">showExplorer</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>完整版本</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#if DEBUG</span>
</span><span class='line'><span class="cp">#import &quot;FLEXManager.h&quot;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleSixFingerQuadrupleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">tapRecognizer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="cp">#if DEBUG</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tapRecognizer</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">UIGestureRecognizerStateRecognized</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// This could also live in a handler for a keyboard shortcut, debug menu item, etc.</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">FLEXManager</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="n">showExplorer</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>功能示例</h2>

<h3>修改视图</h3>

<p>点击<code>views</code>，从工具栏下面弹出界面，显示视图的详细信息，并能修改属性值和调用方法。</p>

<p><img src="https://camo.githubusercontent.com/950a2612b1dc796bc5cc3fd9909ed465166afc5b/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f616476616e6365642d766965772d65646974696e672e676966" alt="Views" /></p>

<h3>查看对象</h3>

<p>FLEX在malloc分配的内存块中查找相关的对象，如下：</p>

<p><img src="https://camo.githubusercontent.com/573692941c2901c0fd1ce0f085c101f6b4d3ae3b/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f686561702d62726f777365722e676966" alt="Object in Heap" /></p>

<h3>文件浏览</h3>

<p>查看APP沙盒内的文件系统，包括文件大小、图片预览、以友好的方式显示json和plist文件。也能将文本和图片文件拷贝和剪贴板中，</p>

<p><img src="https://camo.githubusercontent.com/df6e924a21ecaf8080342d80f384e88f8249c3fe/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f66696c652d62726f777365722e676966" alt="File Browser" /></p>

<h3>探索系统库资源</h3>

<p>深挖框架内部的class，创建相应的实例，并访问其状态。</p>

<p><img src="https://camo.githubusercontent.com/c91fc34a63f05f803cdc0d23d72ae047d0b960bd/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f73797374656d2d6c69627261726965732d62726f777365722e676966" alt="System Library Exploration" /></p>

<h3>编辑NSUserDefaults</h3>

<p>FLEX允许修改NSUserDefaults的strings, numbers, arrays, and dictionaries，及其它们的组合，输入格式为json；如果使用其它数据作为key，如NSDate，则是只读的。</p>

<p><img src="https://camo.githubusercontent.com/c9b72bf288f79993fbbc46cd4c0c37504fd8e11b/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f6e737573657264656661756c74732d656469746f722e676966" alt="NSUserDefaults" /></p>

<h3>探索其它APP</h3>

<p>代码注入留给大家去摸索了</p>

<p><img src="https://camo.githubusercontent.com/de456cb9f822094e49b40692cd9720c8e99905d7/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f666c65782d726561646d652d726576657273652d312e706e67" alt="Injection" /><img src="https://camo.githubusercontent.com/44624ad09a907893fc95bf35283bc12439ae9d93/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f666c65782d726561646d652d726576657273652d322e706e67" alt="Injection" /></p>

<h2>避免将FLEX编译到正式版本</h2>

<p>尽管FLEX很适合在开发调试的时候使用，但它不应该让最终用户看到。在Xcode &ndash;> Project &ndash;> Build Setting，点<code>+</code>选择<code>Add User-Defined Setting</code>。</p>

<p><img src="https://camo.githubusercontent.com/5b1cbb5cb14496ee12a8a8aeacc2c155a735a1c1/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f666c65782d726561646d652d6578636c7564652d312e706e67" alt="Excluding FLEX" /></p>

<p>命名为<code>EXCLUDED_SOURCE_FILE_NAMES</code>，在<code>Release</code>配置中，填入<code>FLEX*</code>，将不会编译所有以FLEX开头的文件，<code>Debug</code>配置里空白就行了。</p>

<p><img src="https://camo.githubusercontent.com/843997bca76f737561e1084293e9dfd90cda4d97/687474703a2f2f656e67696e656572696e672e666c6970626f6172642e636f6d2f6173736574732f666c65782f666c65782d726561646d652d6578636c7564652d322e706e67" alt="" /></p>

<p>在所有集成FLEX代码的地方，确保将其嵌入到<code>#if DEBUG</code>中，更多相关信息，请参考官方示例。</p>

<h2>注意</h2>

<ul>
<li>NSUserDefaults中，如果值的类型为<code>id</code>，FLEX将把输入的string转为json，目的是使用strings, numbers, arrays, and dictionaries的组合。如果值为string，则一定用字符串引号包裹起来，显示使用 <code>NSString</code> 的属性和实例变量，则不用引号。</li>
<li>在使用FLEX时，你可能会取消异常断点。FLEX会产生一些异常，当接收了某种不能处理的输入（如<code>NSGetSizeAndAlignment()</code>）, 为了防止程序崩溃，FLEX会捕获并将其抛出，但是这样会激活你的断点。</li>
</ul>


<p>译自 <a href="https://github.com/Flipboard/FLEX/">FLEX README.md</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Tips]]></title>
    <link href="http://neater.github.io/blog/2014/07/30/mac-tips/"/>
    <updated>2014-07-30T15:37:40+08:00</updated>
    <id>http://neater.github.io/blog/2014/07/30/mac-tips</id>
    <content type="html"><![CDATA[<h4>Mac下打开最近访问项</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>⌘ + ⇥ 切换App的时候，⌘不放，再按↑，将会显示该App最近打开的文件。使用↑↓←→进行选择，按 ↩ 打开。</span></code></pre></td></tr></table></div></figure>


<p>虽然CMD中有很多快捷键，但无法大范围移动光标，OS X 下，按住option，然后鼠标点击当前行，光标会移动到该处。</p>

<h3>键盘操控对话框</h3>

<p>以未保存对话框为例
<img src="https://farm3.staticflickr.com/2897/14005766309_e55ffb73ac_z.jpg" alt="" /></p>

<ul>
<li>回车 —> Save</li>
<li>⌘ + . &ndash;> Cancel</li>
<li>⌘ + Del &ndash;> Delete</li>
<li>⌘ + ⇧ + H &ndash;> 跳转至主目录</li>
<li>⌘ + D   &ndash;>  跳转至桌面</li>
<li>⌘ + ⇧ + G &ndash;> 输入要跳转的路径，按 ⇥ 自动补全。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通讯学习心得]]></title>
    <link href="http://neater.github.io/blog/2014/07/30/tong-xun-xue-xi-xin-de/"/>
    <updated>2014-07-30T09:04:15+08:00</updated>
    <id>http://neater.github.io/blog/2014/07/30/tong-xun-xue-xi-xin-de</id>
    <content type="html"><![CDATA[<p>眼下正在大力普及4G，但听说韩国已经在部署5G计划了，互联网和通讯行业发展迅猛，一大波术语让人困惑，比如 4G、5G、GPRS、CDMA、LTE。再读几本入门书籍后，有了感性的认识，分别是《大话通信》、《大话移动通信》、《大话无线通信》。</p>

<h3>信号</h3>

<p>以前大量使用模拟信号（连续的随时间变化的波形信号），优点是避免失真，如电影胶片；而数字信号，最大的优点是对跑嗓声的处理，另外还有加密、校验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode技巧]]></title>
    <link href="http://neater.github.io/blog/2014/07/29/xcodeji-qiao/"/>
    <updated>2014-07-29T14:05:32+08:00</updated>
    <id>http://neater.github.io/blog/2014/07/29/xcodeji-qiao</id>
    <content type="html"><![CDATA[<h4>Edit all in Scope</h4>

<p>适合进行大批量的修改变量和方法；选定一个想要修改的字符串，然后选择<strong>Edit－Edit all in Scope</strong>，然后在你输入的时候，所有该字符出现的地方都进行同步更改。</p>

<h3>#</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewController瘦身之 抽取View Logic]]></title>
    <link href="http://neater.github.io/blog/2014/07/24/viewcontrollershou-shen/"/>
    <updated>2014-07-24T16:45:58+08:00</updated>
    <id>http://neater.github.io/blog/2014/07/24/viewcontrollershou-shen</id>
    <content type="html"><![CDATA[<p>面对日益臃肿的ViewController，测试、重构、增加新的需求将越来越困难，怎么破？</p>

<p>通常我们会在ViewController里加载并控制View（通过Xib或者loadView方法），这样VC就会关心View的内部细节，如layout、Animation、如何填充、响应子视图的事件等，使VC更难以理解，而且增加了和View的耦合。</p>

<p>VC主要负责与用户的交互，主要是控制内部View以及用户操作时产生的事件，而不是用来实现View，如果View使用了UITableView或者UICollectionView，那么VC不得不关心View的内部细节，就像一只冲出牢笼的野兽，变得难以驾驭，应该避免这样。</p>

<p>下面是如何设计View的实践：</p>

<h3>为Views创建Class</h3>

<p>首先，为Views创建类，它封装了View的所有内部细节，并为VC提供抽象接口，用来提供改变View状态的方法或者获得其内部信息，这样一来，VC实现了与View的解耦，不用关心View的内部实现，只需要访问View提供的接口即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'><span class="k">@class</span> <span class="nc">JPLoginViewModel</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">JPLoginView</span> : <span class="nc">UIView</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">JPLoginViewModel</span> <span class="o">*</span><span class="n">viewModel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showAppearanceAnimation</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showNoConnectionFeedback:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">shouldShow</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">JPLoginViewModel</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">userName</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出，这个.h文件没有IBOutlets和subViews的信息，因为他们都是内部细节；如果不这样的话，VC将能访问这样内部细节，设想将来你想使用UITextFields和UILabels，而不是现在的UITableView来显示login和password，修改VC将是无法避免的。</p>

<h3>使用View Model封闭View信息</h3>

<p>上面的代码中的JPLoginViewModel封闭了View显示的细节，其中定义了2个字符串，而不在View中这样做，是因为View Model可以作为两者沟通的桥梁。
View Model一般定义在View中，并提供操作的接口，VC创建View Model，并给其赋值，当然也能再获得这样值，再把这个View Model的引用赋给View。通过KVO，VC可以实现对View属性的监控。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">userName</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span> <span class="c1">//Retreive it from your bussiness logic</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">password</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span> <span class="c1">//Retreive it from your bussiness logic</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">JPLoginViewModel</span> <span class="o">*</span><span class="n">viewModel</span> <span class="o">=</span> <span class="p">[[</span><span class="n">JPLoginViewModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">viewModel</span><span class="p">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">password</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">loginView</span><span class="p">.</span><span class="n">viewModel</span> <span class="o">=</span> <span class="n">viewModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidAppear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">loginView</span><span class="p">.</span><span class="n">viewModel</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">forKeyPath:</span><span class="s">@&quot;password&quot;</span> <span class="nl">options:</span><span class="n">kNilOptions</span> <span class="nl">context:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">viewDidDisappear:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">removeObserver:</span><span class="n">self</span> <span class="nl">forKeyPath:</span><span class="s">@&quot;password&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来，VC就知道什么时候View什么时候修改了View Model的数据，而不用通过蛋疼的Delegate，同时与View实现了解耦，View Model的这种简单清晰的方式，实现了VC与View之间的数据同步。</p>

<h3>在内部接口中引用Subviews</h3>

<p>当你需要引用内部的Subviews，例如UILable，UITableView等视图时，所有这些内部细节对任何其它类来说都应该是不可见的，应该把这些细节定义为View的内部属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;JPLoginView.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">JPLoginView</span><span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">titleLabel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UITableView</span> <span class="o">*</span><span class="n">fieldsTableView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UIButton</span> <span class="o">*</span><span class="n">loginButton</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UIProgressView</span> <span class="o">*</span><span class="n">connectionIssueProgressView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">JPLoginView</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，将来如果想把UITableView改成UILabels和UITextFields，不用修改VC，改这个类就可以了，删除也是一样。</p>

<h3>使用XIBs定义Layout</h3>

<p>定义View的最佳方式是使用XIBs，而不是在VC里面，这可能会让人不解，XIBs自动创建UIView和Layout，VC使用它初始化View。</p>

<p>定义界面时，XIBs可以减少代码量，而且表现得很出色。通过IBOutlets来连接View的内部属性和XIBs创建的Subviews，也就是常说的连线。在Interface Builder中，可以指定View的具体类型，通过这种方式，Framework自动创建具体类型的View。</p>

<p><img src="http://jpellat.com/wp-content/uploads/2014/05/Screenshot-2014-05-18-01.02.28-300x129.png" alt="fdfs" />
<img src="http://jpellat.com/wp-content/uploads/2014/05/connect-300x136.png" alt="fdfs" /></p>

<h3>使用Delegate响应View的异步事件</h3>

<p>当用户点击登陆按钮时，我们应该让VC马上响应这一事件，并不是说VC应该关心登陆的逻辑实现，下面谈谈如何让VC在这种情况下实现解耦。</p>

<p>Delegate应该定义在View的头文件中，因为是View产生了事件。可以为View定义一个Delegate的属性，而让VC为它赋值，方式可以是通过XIBs，或者在viewDidLoad方法中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@protocol</span> <span class="nc">JPLoginViewDelegate</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">JPLoginView</span> : <span class="nc">UIView</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">JPLoginViewModel</span> <span class="o">*</span><span class="n">viewModel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="n">JPLoginViewDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//methods</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">JPLoginViewDelegate</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">didTapLoginAtLoginView:</span><span class="p">(</span><span class="n">JPLoginView</span> <span class="o">*</span><span class="p">)</span><span class="n">loginView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Delegate的所有方法，可以集中在VC中，如果使用Block的话，viewDidLoad会充斥大量的代码，影响可读性，这方面，无疑Delegate做得更好。
也可以使用Delegate验证View内部的文本格式以及数据的有效性，VC可以调用框架的许多API，来验证Model中的相关数据。</p>

<h3>为异步操作使用Block</h3>

<p>View有许多操作都是异步的，比如显示动画、显示需要客户确认，这时应该使用Block，这样可以增加可读性，使代码更紧凑。</p>

<p>应该将不同的操作分离成Block。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">typedef</span> <span class="nf">BOOL</span><span class="p">(</span><span class="o">^</span><span class="n">JPLoginViewConfirmationCompletion</span><span class="p">)();</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">JPLoginView</span> : <span class="nc">UIView</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showUserConfirmationWithCompletionBlock:</span><span class="p">(</span><span class="n">JPLoginViewConfirmationCompletion</span><span class="p">)</span><span class="nv">completion</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种策略有利于测试，可以创建一对测试View，仅仅调用block，而不用为两个View分别模拟测试数据。</p>

<h3>Datasources置于View中而不是ViewController</h3>

<p>众所周之，VC通常实现Datasources，Apple的示例代码也是这么做的，但是仔细想想，当把UITableView的内部View改成UILabel或者UITextfield时，不可避免地要修改VC，无疑增加了耦合。</p>

<p>另外，如果View Model所需要的数据已经由专门的Class提供，为什么还要VC充当这个角色？TableView只需要关心视图的细节。</p>

<p>View所要做的仅仅是实例化分离出来的Datasources，并且将View Model赋值给它。将Cell的创建和配置信息封装起来，增加了可读性；分离Datasoures，方便进行单独测试，比如：number of cells、number of sections。</p>

<h4>结论</h4>

<p>有些人可能认为，这些不符合Apple的标准，但Apple Guideline并没有明确禁止把View从View Controller分离出来，也没有说只能在VC中定义IBOutlet，Guideline适用的场景是在比较小的系统中，当应用场景变的越来越大、越来越复杂，那就必须分离逻辑，好处是增加了可读性和可测试性。</p>

<p>当然，增加额外的层会影响性能，但考虑到这样做所带来的好处，比如更易读、更快的查找，这点性能上的损失是绝对值得的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMD Tricks]]></title>
    <link href="http://neater.github.io/blog/2014/01/14/cmd-tricks/"/>
    <updated>2014-01-14T15:47:05+08:00</updated>
    <id>http://neater.github.io/blog/2014/01/14/cmd-tricks</id>
    <content type="html"><![CDATA[<h4>输出文件的指定行</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sed -n 'x,yp' file;   awk 'NF &gt; x && NF &gt; y' file</span></code></pre></td></tr></table></div></figure>


<p>从x行开始，输出y行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tail +x file | head -y
</span><span class='line'>
</span><span class='line'>head和tail 参数 -n的不同，head -n -10 除去最后10行 tail -n +10 从第10行开始</span></code></pre></td></tr></table></div></figure>


<h4>Mac下获取UDID</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ioreg -w 0 -rc IOUSBDevice -k SupportsIPhoneOS | sed -n 's/.*USB Serial Number[^0-9a-z]*\([0-9a-z]*\).*/\1/p'
</span><span class='line'>
</span><span class='line'>system_profiler SPUSBDataType | sed -n -e '/iPhone/,/Serial/p' | grep "Serial Number:" | awk -F ": " '{print $2}'
</span><span class='line'>
</span><span class='line'>system_profiler SPUSBDataType | grep "Serial Number:.*" | sed s#".*Serial Number: "##</span></code></pre></td></tr></table></div></figure>


<h4>清空文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; filename
</span><span class='line'>
</span><span class='line'>cat /dev/null &gt; filename</span></code></pre></td></tr></table></div></figure>


<p>给机器增加Load</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat /dev/nll/unandom | gzip -9 &gt; /dev/null & </span></code></pre></td></tr></table></div></figure>


<hr />

<p>使用pgrep查找进程id，而不用 ps -ef | grep XXX</p>

<hr />

<p>echo $0，当前使用的 shell</p>

<p>vim打开剪贴板内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias vipb='xclip -selection clipboard -o | vim -' // Linux
</span><span class='line'>alias vipb="pbpaste | vim -"  // Mac</span></code></pre></td></tr></table></div></figure>


<p>显示sqlite文件内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlite3 -line database.db </span></code></pre></td></tr></table></div></figure>


<p>修改SSH的RSA密码短语</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -f ~/.ssh/id_rsa -p 修改SSH的RSA密码短语</span></code></pre></td></tr></table></div></figure>


<p>man -w/&mdash;path</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>打印相关帮助文档的位置</span></code></pre></td></tr></table></div></figure>


<p>使用-i参数默认的前面输出用{}代替，-I参数可以指定其他代替字符，如例子中的[]</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -name "file" | xargs -I [] cp []</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013回顾 &amp; 2014展望]]></title>
    <link href="http://neater.github.io/blog/2013/12/26/2013hui-gu-and-2014zhan-wang/"/>
    <updated>2013-12-26T14:29:06+08:00</updated>
    <id>http://neater.github.io/blog/2013/12/26/2013hui-gu-and-2014zhan-wang</id>
    <content type="html"><![CDATA[<h3>2014投资</h3>

<h4>健身</h4>

<p>健身器材 第二付哑铃 健身架 迎体向上门框架 弹力绳，练出肌肉再去健身房</p>

<hr />

<h3>家居</h3>

<ul>
<li>宽大的桌子</li>
<li>折叠灯</li>
<li>地图墙纸</li>
</ul>


<hr />

<p>购买杜洋套装，学习单片机及电子制作</p>

<p>购买iPad Mini, Kindle PaperWite 3, Arduino &amp;&amp; Raspberry Pi, SSD</p>

<h3>云</h3>

<p>Haddop</p>

<h3>语言</h3>

<p>将Ruby作为日常编程语言，再过一遍JavaScript，偶尔Lisp，系统学习Go，还有C++</p>

<h3>理论</h3>

<ul>
<li>数据结构</li>
<li>算法</li>
<li>网络 tcp/ip</li>
</ul>


<p>开始使用 zsh &amp; Alfred</p>

<p>学习 Verilog，购买FPGA，阅读《自制CPU》
自制编程语言 30天自制操作系统</p>
]]></content>
  </entry>
  
</feed>
