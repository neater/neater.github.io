<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Neater]]></title>
  <link href="http://neater.github.io/atom.xml" rel="self"/>
  <link href="http://neater.github.io/"/>
  <updated>2015-10-26T14:32:20+08:00</updated>
  <id>http://neater.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RxJava 在 Android 开发中的初次尝试（下）]]></title>
    <link href="http://neater.github.io/blog/2015/09/23/rxjava-zai-android-kai-fa-zhong-de-chu-ci-chang-shi-%28xia-%29/"/>
    <updated>2015-09-23T15:06:06+08:00</updated>
    <id>http://neater.github.io/blog/2015/09/23/rxjava-zai-android-kai-fa-zhong-de-chu-ci-chang-shi-(xia-)</id>
    <content type="html"><![CDATA[<p>这次我们来完成⎾RxJava 在 Android 开发中的初次尝试⏌的下半部分，在上次代码的基础上，用 RxJava 实现网络请求、多线程、AsyncTask。</p>

<p>在点击<code>Submit</code>按钮后，发起一次网络请求，可以用 Retrofit，对 RxJava 支持的很好，不过我不打算用他，我想用 RxJava 来模拟网络请求实现进度条的显示功能。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">submit</span><span class="o">(</span><span class="n">InputValidation</span> <span class="n">inputValidation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">request</span><span class="o">(</span><span class="n">inputValidation</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">io</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">observeOn</span><span class="o">(</span><span class="n">AndroidSchedulers</span><span class="o">.</span><span class="na">mainThread</span><span class="o">())</span>
</span><span class='line'>            <span class="o">.</span><span class="na">doOnSubscribe</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">enableWidgets</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">doOnCompleted</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">enableWidgets</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">doOnError</span><span class="o">(</span><span class="n">throwable1</span> <span class="o">-&gt;</span> <span class="n">enableWidgets</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="nl">progressBar:</span><span class="o">:</span><span class="n">setProgress</span>
</span><span class='line'>            <span class="o">);</span>
</span><span class='line'><span class="o">}</span><span class="n">I</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过要注意的是，网络等需要多线程的代码需要调用 <code>subscribeOn(Schedulers.io())</code>，不然会报 ANR 错误，还有要对界面进行操作需要调用 <code>observeOn(AndroidSchedulers.mainThread())</code>，<code>doOn*</code>这一类方法会在更阶段进行回调，我把一些状态设置和显示的代码写在里面</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">enableWidgets</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">enable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">userName</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">enable</span><span class="o">);</span>
</span><span class='line'>    <span class="n">password</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">enable</span><span class="o">);</span>
</span><span class='line'>    <span class="n">confirmedPassword</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">enable</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">visible</span> <span class="o">=</span> <span class="n">enable</span> <span class="o">?</span> <span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span> <span class="o">:</span> <span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">;</span>
</span><span class='line'>    <span class="n">progressBar</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">visible</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">enable</span> <span class="o">?</span> <span class="s">&quot;end submit&quot;</span> <span class="o">:</span> <span class="s">&quot;begin submit&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Snackbar</span><span class="o">.</span><span class="na">make</span><span class="o">(</span><span class="n">submitButton</span><span class="o">,</span> <span class="n">text</span><span class="o">,</span> <span class="n">Snackbar</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>模拟网络请求的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">request</span><span class="o">(</span><span class="n">InputValidation</span> <span class="n">inputValidation</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">subscriber</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">101</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">subscriber</span><span class="o">.</span><span class="na">onNext</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">subscriber</span><span class="o">.</span><span class="na">onCompleted</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subscriber</span><span class="o">.</span><span class="na">onError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>把用户输入的代码移到 InputValidation.java 里，这里不贴代码了。最终效果：</p>

<p><img src="../images/progress.gif" alt="submit" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava 在 Android 开发中的初次尝试（上）]]></title>
    <link href="http://neater.github.io/blog/2015/07/22/rxjava-zai-android-kai-fa-zhong-de-yi-ci-chang-shi/"/>
    <updated>2015-07-22T10:01:35+08:00</updated>
    <id>http://neater.github.io/blog/2015/07/22/rxjava-zai-android-kai-fa-zhong-de-yi-ci-chang-shi</id>
    <content type="html"><![CDATA[<p>接触 RxJava 有一段时间了，写的都是一些小打小闹的 Sample 程序，不如就在实际项目中一试伸手。</p>

<p>许多 App 都有注册功能，当没有输入或者输入不符合业务逻辑时，会有错误提示。好点的用户体验应该是，只有当所有输入符合业务逻辑时，才会让注册按钮变成可点击状态，代码如下：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@InjectView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">user_name</span><span class="o">)</span>
</span><span class='line'>    <span class="n">EditText</span> <span class="n">userName</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@InjectView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">password</span><span class="o">)</span>
</span><span class='line'>    <span class="n">EditText</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@InjectView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">confirmedPassword</span><span class="o">)</span>
</span><span class='line'>    <span class="n">EditText</span> <span class="n">confirmedPassword</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@InjectView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">submit_button</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Button</span> <span class="n">submitButton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">userNameString</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">passwordString</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">confirmedPasswordString</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ButterKnife</span><span class="o">.</span><span class="na">inject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">addTextChangedListenners</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addTextChangedListenners</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">userName</span><span class="o">.</span><span class="na">addTextChangedListener</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWatcher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">userNameString</span> <span class="o">=</span> <span class="n">charSequence</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>                <span class="n">validateUserInput</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterTextChanged</span><span class="o">(</span><span class="n">Editable</span> <span class="n">editable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">password</span><span class="o">.</span><span class="na">addTextChangedListener</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWatcher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">passwordString</span> <span class="o">=</span> <span class="n">charSequence</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>                <span class="n">validateUserInput</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterTextChanged</span><span class="o">(</span><span class="n">Editable</span> <span class="n">editable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">confirmedPassword</span><span class="o">.</span><span class="na">addTextChangedListener</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWatcher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTextChanged</span><span class="o">(</span><span class="n">CharSequence</span> <span class="n">charSequence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">confirmedPasswordString</span> <span class="o">=</span> <span class="n">charSequence</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>                <span class="n">validateUserInput</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterTextChanged</span><span class="o">(</span><span class="n">Editable</span> <span class="n">editable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateUserInput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">isUserNameValid</span> <span class="o">=</span> <span class="n">userNameString</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">userNameString</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">isPasswordValid</span> <span class="o">=</span> <span class="n">passwordString</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">passwordString</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">isPasswordEqual</span> <span class="o">=</span> <span class="n">confirmedPasswordSting</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">confirmedPasswordSting</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">passwordString</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">enable</span> <span class="o">=</span> <span class="n">isUserNameValid</span> <span class="o">&amp;&amp;</span> <span class="n">isPasswordValid</span> <span class="o">&amp;&amp;</span> <span class="n">isPasswordEqual</span><span class="o">;</span>
</span><span class='line'>        <span class="n">submitButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">enable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>用传统方法，实现起来费时费力、容易出错、难以维护，让我们开启响应式模式，用 RxJava 来实现，不过先上个流程图先。</p>

<p><img src="http://neater.github.io/images/flow.jpg" alt="flow" /></p>

<p>如图所示，在流中需要传递一个 model，为简化流程，用户名只规定长度大于2，密码长度大于3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InputValidation</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">userName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">confirmedPassword</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">InputValidation</span><span class="o">(</span><span class="n">String</span> <span class="n">userName</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">String</span> <span class="n">confirmedPassword</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">confirmedPassword</span> <span class="o">=</span> <span class="n">confirmedPassword</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">allowSubmit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">isUserNameValid</span> <span class="o">=</span> <span class="n">userName</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">isPasswordValid</span> <span class="o">=</span> <span class="n">password</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">isPasswordEqual</span> <span class="o">=</span> <span class="n">confirmedPassword</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">allowSubmit</span> <span class="o">=</span> <span class="n">isUserNameValid</span> <span class="o">&amp;&amp;</span> <span class="n">isPasswordValid</span> <span class="o">&amp;&amp;</span> <span class="n">isPasswordEqual</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">allowSubmit</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">stringOfTextChangEvent</span><span class="o">(</span><span class="n">OnTextChangeEvent</span> <span class="n">onTextChangeEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">onTextChangeEvent</span><span class="o">.</span><span class="na">text</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建并转成字符串流，WidgetObservable.text 是 RxAndroid 提供的获取 EditText 输入文本的 API，map中传入的是转换方法的引用，这也是 Java8 才支持的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">initRx</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">userNameObservable</span> <span class="o">=</span> <span class="n">WidgetObservable</span><span class="o">.</span><span class="na">text</span><span class="o">(</span><span class="n">userName</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">InputValidation:</span><span class="o">:</span><span class="n">stringOfTextChangEvent</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">passwordObservable</span> <span class="o">=</span> <span class="n">WidgetObservable</span><span class="o">.</span><span class="na">text</span><span class="o">(</span><span class="n">password</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">InputValidation:</span><span class="o">:</span><span class="n">stringOfTextChangEvent</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Observable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">confirmedPasswordObservable</span> <span class="o">=</span> <span class="n">WidgetObservable</span><span class="o">.</span><span class="na">text</span><span class="o">(</span><span class="n">confirmedPassword</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">InputValidation:</span><span class="o">:</span><span class="n">stringOfTextChangEvent</span><span class="o">);</span>
</span><span class='line'><span class="o">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>将三个输入流合并成一个，并根据验证结果设置提交按钮的状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">......</span>
</span><span class='line'>        <span class="n">Observable</span><span class="o">&lt;</span><span class="n">InputValidation</span><span class="o">&gt;</span> <span class="n">inputValidationObservable</span> <span class="o">=</span> <span class="n">Observable</span><span class="o">.</span><span class="na">combineLatest</span><span class="o">(</span>
</span><span class='line'>                <span class="n">userNameObservable</span><span class="o">,</span>
</span><span class='line'>                <span class="n">passwordObservable</span><span class="o">,</span>
</span><span class='line'>                <span class="n">confirmedPasswordObservable</span><span class="o">,</span>
</span><span class='line'>                <span class="nl">InputValidation:</span><span class="o">:</span><span class="k">new</span>
</span><span class='line'>        <span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">inputValidation</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">submitButton</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">inputValidation</span><span class="o">.</span><span class="na">allowSubmit</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">inputValidation</span><span class="o">;</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'><span class="o">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>combineLatest 的最后一个参数是个合并方法，我传入了个 Java8 支持的构造器引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">......</span>
</span><span class='line'>        <span class="n">ViewObservable</span><span class="o">.</span><span class="na">clicks</span><span class="o">(</span><span class="n">submitButton</span><span class="o">).</span><span class="na">zipWith</span><span class="o">(</span>
</span><span class='line'>                <span class="n">inputValidationObservable</span><span class="o">,</span>
</span><span class='line'>                <span class="o">(</span><span class="n">onClickEvent</span><span class="o">,</span> <span class="n">inputValidation</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">inputValidation</span>
</span><span class='line'>        <span class="o">).</span><span class="na">subscribe</span><span class="o">();</span>
</span><span class='line'><span class="o">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果：</p>

<p><img src="http://neater.github.io/images/submit.gif" alt="submit" /></p>

<p>在上面的代码中，起初调用的是 combineLatest，导制每次输入时，都会触发最终的 Observable，最后改用 zip 来合并，因为 zip 只有新的流出现，才会被触发，而 combineLatest 只要其中任意一个流有新数据，都会被触发，看图比较直观。</p>

<p>zip</p>

<p><img src="http://neater.github.io/images/zip.png" alt="zip" /></p>

<p>combineLatest</p>

<p><img src="http://neater.github.io/images/combineLatest.png" alt="combineLatest" /></p>

<p>用 RxJava 来写 App，代码更加清晰，大大降低了耦合度，使分离的逻辑形成链，让上帝的归上帝，凯撒的归凯撒，感觉就是一个字~~酸爽！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015上半年读过的书]]></title>
    <link href="http://neater.github.io/blog/2015/07/20/2015shang-ban-nian-du-guo-de-shu/"/>
    <updated>2015-07-20T10:56:18+08:00</updated>
    <id>http://neater.github.io/blog/2015/07/20/2015shang-ban-nian-du-guo-de-shu</id>
    <content type="html"><![CDATA[<p>本书作者是我最喜欢的著名经济学家王福重，他长期担任《财经郞眼》节目的嘉宾，虽长相匪气，但语言犀利幽默、视角独特</p>

<h3>从0到1</h3>

<p>网上被疯传的一本创业相关的书，感觉理论偏多，天生浮躁的年轻人看了恐怕会更加浮躁，有些不接地气，不过另一个《创业维艰》就相当不错。</p>

<h3>疯狂的程序员</h3>

<p>从上学、工作、创业，有很多当前的影子</p>

<h3>RxJava Essentials</h3>

<p>响应式编程最近是个很火的话题，本书内容是在 RxJava &amp; RxAndroid 的使用，概念讲解清晰，配有不少插图，不到200页，1天就能读完。</p>

<h2>下半年想读的书</h2>

<h3>创业维艰</h3>

<p>都说比《从0到1》强不少</p>

<h3>信息简史</h3>

<h3>三体</h3>

<h2>尾巴</h2>

<p>自从去年买了 Kindle Voyage，看的书明显增加，确实是看书的利器，也给爱看书的老爸买了个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava &amp; RxAndroid 心得]]></title>
    <link href="http://neater.github.io/blog/2015/07/17/rxjava-and-rxandroid-xin-de/"/>
    <updated>2015-07-17T10:20:58+08:00</updated>
    <id>http://neater.github.io/blog/2015/07/17/rxjava-and-rxandroid-xin-de</id>
    <content type="html"><![CDATA[<p>之前使用了一段 ReactiveCocoa，果然体会到了响应式编程的强大，写起代码来那叫一个酸爽，不过接触响应式编程的时间毕竟太短，并没有完全掌握 ReactiveCocoa，不过最近再学习 RxJava，就顺利的多了。</p>

<h3>RxAndroid</h3>

<h4>接口的变化</h4>

<p>AndroidObservable &ndash;> AppObservable
AndroidObservale.fromBroadcast &ndash;>
ContentObservable.fromBroadcast</p>

<p>下面两本书写的不错：</p>

<ul>
<li><a href="">RxJava Essentials</a></li>
<li><a href="">Learning Reactive Programming with Java 8</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蔡学鏮语录]]></title>
    <link href="http://neater.github.io/blog/2015/07/10/cai-xue-kang-yu-lu/"/>
    <updated>2015-07-10T16:31:25+08:00</updated>
    <id>http://neater.github.io/blog/2015/07/10/cai-xue-kang-yu-lu</id>
    <content type="html"><![CDATA[<p>蔡学镛是我非常喜欢的台湾架构师，著有《编程ING》《Java夜未眠》，他的<a href="http://weibo.com/p/1035051614282004">微博</a>中的很多理念对程序员来说很有价值，下面就是他的部分语录。</p>

<ul>
<li><p>做架构时，为了避免混淆，我尽量让技术名词有固定的定义。系统、子系统、对象三者是包含的关系。系统暴露接口（Port），子系统暴露服务，对象暴露方法（ie. PASIO 的「操作」）。而接口、服务、方法又有各自的定义，他们主要的差异是在「影响范围」和「业务完整性」上。</p></li>
<li><p>想让系统灵活有弹性，可以通过配置（configuration）。简单的配置，只能设置一些常量，无法改变流程。这种情况下，如果想改变流程，就必须通过插件（前提是系统有事先设计插件的接入方式）&hellip;. 我不倾向于用插件，我倾向于用更弹性的配置来改变流程，这时候通常需要配合定义一个 DSL 。</p></li>
<li><p>我写代码时把对象内分成五部分：PASIO。Properties 用来读写对象内的数据；Attributes 是对象内所封装的数据；States 用来查询对象（和参数）是否符合状态；Instructions 是基本的方法；Operations 是有复杂逻辑的方法。我还限定 PASIO 五者间的调用关系，我发现这么做有助于把对象配置化。</p></li>
<li><p>Attribute 是真正保存数据的地方，最好是通过 Property 进行访问。对于 Object Model 来说，Attribute 就是 Field；对于 Relational Model 来说，Attribute 就是 Column；对于 Associative Model 来说，Attribute 就是 Association。</p></li>
<li><p>设计 DSL 的时候，我先想像自己是使用此领域语言的专家，且没有计算机编程能力，然后设想一个场景，再用最方便的方式描写此场景。描写方式尽量描述目的（What），而非描述做法（How）。几个场景的描述之后，就可以归纳出一个简单有弹性的 DSL。</p></li>
<li><p>软件开发的难度在于「如何将需求化为设计」，而不是「如何将设计化为代码」。能将设计化为代码的只能称为码农，能将需求化为设计的才是软件工程师。而架构师，更是要把非功能需求（例如高并发、高可用、可维护性、扩展性）的设计考虑进来。</p></li>
<li><p>那些担心技术做不久的人，他们的担心是有道理的，因为他们的技术确实做不久；而那些不担心技术做不久的人，他们不担心也是有道理的，因为他们的技术确实可以做很久 &hellip; 一个人的心态决定了他的职业生涯。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好用到逆天的 Android Studio]]></title>
    <link href="http://neater.github.io/blog/2015/07/08/hao-yong-dao-ni-tian-de-android-studio/"/>
    <updated>2015-07-08T14:51:55+08:00</updated>
    <id>http://neater.github.io/blog/2015/07/08/hao-yong-dao-ni-tian-de-android-studio</id>
    <content type="html"><![CDATA[<p>在好多做 Android 的朋友的怂恿下，终于开始尝试使用 Android Stuio，这一用就放不下了，不仅颜值高（Darcula简直大爱，我是黑色控），而且好用到逆天，听说 RubyMine 和 Android Stuio 同样基于 IntelliJ IDEA，以后开发 Rails 的 IDE也要切换到 RubyMine 了，话不多说，下面是我喜欢的小技巧。</p>

<h3>Help</h3>

<p>每次打开 Android Studio 都会弹出 <code>Tip of the Day</code>，都是一些好用的技巧，每日必读，强裂推荐！还有<code>Help</code>菜单下的<code>Default Keymap Reference</code>，会在线显示所有快捷键，下载后存到我的 Kindle Voyage 里，时不时看下:)。</p>

<p>做过开发的都知道版本控制，其中 Diff 功能可以查看两次提交的差异，不过 Android Studio 不使用版本控制也实现了这个功能：右键调出正在编辑的文件，弹出上下文菜单，选择 <code>Local History</code> &ndash;> <code>Show History</code>.</p>

<p><img src="http://neater.github.io/images/local_history.png" alt="Local History" /></p>

<h4>Live Templates</h4>

<h4>Lambda转换</h4>

<h4>快速查看定义</h4>

<p><code>⌘-Y</code>查看 class</p>

<h4>好用易忘的快捷键</h4>

<p>Optimize imports 清除无效包引用
<code>⌃⌥O</code></p>

<h4>折叠（所有）代码块</h4>

<p><code>⌘-</code>，<code>⌘—</code></p>

<h4>展开（所有）代码块</h4>

<p><code>⌘=</code>，<code>⌘+</code></p>

<h4>显示被调用的地方</h4>

<p><code>⌥F7</code> <code>Find Usages</code></p>

<h4>弹出调用层级</h4>

<p><code>⌃⌥h</code></p>

<h4>包裹代码块</h4>

<p><code>⌘⌥T</code> <code>Surround With</code></p>

<h4>Switcher</h4>

<p><code>⌃⇥</code> <code>Switcher</code>
一旦它被打开，只要你按住ctrl键，你可以使用数字或字母快捷键快速导航。</p>

<h3>我最爱的特性</h3>

<h4>Find Action</h4>

<p>类似Alfred，在输入框里输入要关键字，回车后即执行菜单功能</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[属于程序员的Podcast]]></title>
    <link href="http://neater.github.io/blog/2015/06/30/shu-yu-cheng-xu-yuan-de-podcast/"/>
    <updated>2015-06-30T15:16:14+08:00</updated>
    <id>http://neater.github.io/blog/2015/06/30/shu-yu-cheng-xu-yuan-de-podcast</id>
    <content type="html"><![CDATA[<h3>英文Podcast</h3>

<h4>FragmentedPodcast</h4>

<h4>Android Backstage</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0代码实现iOS引导页]]></title>
    <link href="http://neater.github.io/blog/2015/06/29/0dai-ma-shi-xian-iosyin-dao-ye/"/>
    <updated>2015-06-29T17:27:46+08:00</updated>
    <id>http://neater.github.io/blog/2015/06/29/0dai-ma-shi-xian-iosyin-dao-ye</id>
    <content type="html"><![CDATA[<p>通常App首次启动或者更新版本后，都会显示引导页，用来介绍App的使用方式和新功能的展示。Android App一般采用ViewPage，而iOS App使用UIScrollView，相比Android，则需要更多的代码，不过这一局面在Auto layout推出后发生了变化，话不多说，开干！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[合适的Git Commit怎么写]]></title>
    <link href="http://neater.github.io/blog/2015/06/02/he-gua-de-git-commitzen-yao-xie/"/>
    <updated>2015-06-02T16:31:37+08:00</updated>
    <id>http://neater.github.io/blog/2015/06/02/he-gua-de-git-commitzen-yao-xie</id>
    <content type="html"><![CDATA[<p>人们总是关心为什么做多过于做了什么，这种观念同样出现在写Git Commit的信息上。下面是我总结出来的写提交信息的最佳实践（听烂了都）。</p>

<h3>黄金环路</h3>

<p>我最近重看了一次最喜欢的TED演讲，由Simon Sinek主讲，主题是《如何鼓舞士气》。</p>

<p>他解释了一个非常简单的观念：人们关心领导者为什么做，而不是做什么。这大概也适用于Git的提交信息。</p>

<p><img src="http://i.imgur.com/QCpZaIk.png" alt="The Golden Circle" /></p>

<p>Simon画了上面这张图（要比我画的好的多），解释道：伟大的公司有明确的愿景并且真的在实现它。回到我们的代码，每段代码都有自己的意图，我们要做的就是如何实现它。</p>

<h3>为什么这么做？</h3>

<p>你可能觉得奇怪，这有什么大不了的？是不是扯远了。如果你曾经在一个团队工作过，或者经历过一个长期的项目，在查阅之前的代码时，经常会搞不懂为什么那么写。于是你使用git blame一路查找到提交信息，让人焦虑的是，最终你只会发现：这段代码和提交信息不是你写的。其实你是想知道当初为什么这么写？</p>

<p>更进一步，我见过的绝大多数提交信息都有这个问题，也包括我在内，不久前，还在为我的提交信息洋洋自得，因为每次写之前，我都会仔细考虑，怎么让它尽可能的简单明了。</p>

<h3>惊喜时刻</h3>

<p>一天，我正和Craig Savolainen（导师&amp;我认识的最佳开发者）结队编程，我写了一段自以为很像样的提交信息，而他说这没用并解释道：</p>

<pre><code>Anyone can see WHAT you did just by looking at the code. But the code can never tell someone WHY you did it.
代码可以告诉别人你做了什么，但不能告诉别人你为什么这么做。
</code></pre>

<p>对啊！我立即使用新的风格来写提交信息，不过这需要一些时间来适应，因为提交前，我总是在想这段代码的目的什么，为什么要这么做，这的确很费脑力。好消息是我适应了，已经变得流畅自然了，我发现了一个模式，就是使用“should”。</p>

<h3>示例</h3>

<p>下面是一个实例。我用”做什么风格“写了提交信息：</p>

<pre><code>Card view controller added.
</code></pre>

<p>如果我用“为什么做”风格重写呢？</p>

<pre><code>User should be able to see the card before editing it.
在编辑前，用户应该先查看。
</code></pre>

<p>看到了吗？重写后的版本很容易看出这次提交原因以及一些上下文信息，这对以后维护这些代码的人是很有价值的。当他有问题的时候，就会找到我。同时这对我也有利，当重新阅读之前写的代码时，能帮助我想起提交时的场景！</p>

<h3>结论</h3>

<p>写提交信息的时候，用“为什么做”替代“做什么”对自己和团队都是有益的。在通往软件工匠的道路上，小的进步汇集起来都将是一大步。如果你认同或者有更好的想法，请与我们联系。</p>

<p>Happy exploring!</p>

<h4>旁注</h4>

<p>很明显，这里虽然以Git为例子，但同样适用于其它版本控制系统。我原本想使用“code commit”，但是经过大家的反馈，我决定用“Git commit”，看起来更明了些。</p>

<p>译自
<a href="http://sundeepgupta.ca/writing-great-git-commit-messages/">Writing Great Git Commit Messages</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim技巧]]></title>
    <link href="http://neater.github.io/blog/2015/05/11/vimji-qiao/"/>
    <updated>2015-05-11T09:49:06+08:00</updated>
    <id>http://neater.github.io/blog/2015/05/11/vimji-qiao</id>
    <content type="html"><![CDATA[<h3>加减运算</h3>

<p><code>&lt;C-a&gt;</code>和<code>&lt;C-x&gt;</code>分别对数字进行自增、自减操作，如果在之前加上数字，就能进行加减运算</p>

<p>&#8220;`vim</p>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[兵器谱之Keyboard Maestro]]></title>
    <link href="http://neater.github.io/blog/2015/04/29/bing-qi-pu-zhi-keyboard-maestro/"/>
    <updated>2015-04-29T15:12:45+08:00</updated>
    <id>http://neater.github.io/blog/2015/04/29/bing-qi-pu-zhi-keyboard-maestro</id>
    <content type="html"><![CDATA[<p>Keyboard Maestro是一款类似Alfred的App，但一点也不逊色后者，它对Automator进行了封装，方便用户的使用。</p>

<h1>Firefox快捷设置</h1>

<p>使用浏览器时，我个人非常不习惯网页的白色背景，感觉非常刺眼，于是手动调成灰色，但个别网页不能正常显示，这时只能手动来切换，不管是鼠标点击还是键盘操作都非常烦锁。</p>

<p>Duang！有请Keyboard Maestro（简写成KM）出场，先在KM的编辑器里为我使用的Firefox添加一个Group并命名，在Avaliable in the following applications下拉菜单中选中Firefox，这样之后的操作只会在Firefox中生效，减少全局冲突；接着在中间的Macros栏中点击加号按钮添加一个Macro，取名为<code>Backgroud Color White</code>
<img src="http://neater.github.io/images/group.png" alt="group" /></p>

<p>KM有许多触发动作的机制，这里我设置一个快捷键<code>⌃⌘I</code>，当切换到Firefox中并按下这个快捷捷，就会触发一系列自定义的action。点击<code>New Action</code>，弹出选择列表，作为一个键盘党，按照Firefox修改背景颜色的键盘顺序，添加<code>Interface Control</code>中的<code>Type a keystroke</code>就可以了。问题来了，当我进入<code>常规</code>选项卡里进行设置后，再触发前面设置的快捷键，预设的一系列键盘操作就会在<code>常规</code>里面跳转。</p>

<!--more-->


<p>看来只能用鼠标了，为了统一基准坐标，我把设置窗口拖动到左上角，与Firfox窗口重合，<code>Interface Control</code>的<code>Move or Click Mouse</code>支持鼠标的操作，再添加了相关的action后再试，问题又来了，预先的操作有时成功、有时失败，通过一次次的窗口操作，发现了原因：平时我们手动操作的时候，每一步之间都有间隔时间的，而KM自动执行这一系列action之间则没有间隔时间（后来知道KM支持Debug功能，不用这么费力的调试了），幸好在<code>Control Flow</code>里找到了<code>Pause</code>，再每个action之间添加它，并设置间隔时间为0.2秒，这回终于正常了。
<img src="http://neater.github.io/images/white.gif" alt="white" /></p>

<p>上面手动添加action还是挺费力了，幸好KM支持Macros的录制功能，刚才是把背景色改为白色，那就录个换回灰色的Macro吧。
<img src="http://neater.github.io/images/gray.gif" alt="white" /></p>

<p>最终生成的action列表
<img src="http://neater.github.io/images/actions.png" alt="" /></p>

<p>点击<code>edit</code>按钮，可以看到action的文字说明
<img src="http://neater.github.io/images/edit.png" alt="" /></p>

<p>KM内置了上百种功能强大的action，而且也支持自定义action，接下来好好看看官方的文档，写几个自定义的action！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Ruby写Alfred2的Workflow]]></title>
    <link href="http://neater.github.io/blog/2015/04/13/yong-rubyxie-alfred2de-workflow/"/>
    <updated>2015-04-13T15:25:57+08:00</updated>
    <id>http://neater.github.io/blog/2015/04/13/yong-rubyxie-alfred2de-workflow</id>
    <content type="html"><![CDATA[<p>Mac下的大杀器Alfred2用了好久，Workflow也收集了不少，那为什么不自己写一个呢？当添加一个Workflow时发现，竟然支持这么多的语言，那就用我的最爱Ruby开工吧！</p>

<p><img src="../images/languages.png" alt="view frame" /></p>

<p>第一次就拿ASCII码转换练练手吧，可以将十进制ASCII码转换成字符</p>

<p><img src="http://ytliu.info/images/2014-04-14-1.png" alt="" /></p>

<p>还可以将16进制ASCII转换成字符</p>

<p><img src="http://ytliu.info/images/2014-04-14-2.png" alt="" /></p>

<p>或者把字符转换成ASCII码</p>

<p><img src="http://ytliu.info/images/2014-04-14-3.png" alt="" /></p>

<!--more-->


<p>这里使用了<a href="http://zhaocai.github.io/alfred2-ruby-template/">alfred2-ruby-template</a>模板，使用过程如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/zhaocai/alfred2-ruby-template.git
</span><span class='line'><span class="nv">$ </span>mv alfred2-ruby-template alfred2-ascii-translator
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>alfred2-ascii-translator
</span></code></pre></td></tr></table></div></figure>


<p>更新config.yml的<code>domain</code>, <code>id</code>, <code>path</code>字段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># bundle_id = &quot;domain.id&quot;</span>
</span><span class='line'><span class="c1"># path is the relative path to the workflow in the project root</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ascii</span>
</span><span class='line'><span class="l-Scalar-Plain">domain</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">me.ytliu</span>
</span><span class='line'><span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">alfred2-ascii-translator</span>
</span><span class='line'><span class="c1"># If you are using Alfred&#39;s advanced Dropbox sync, indicate the path shown in</span>
</span><span class='line'><span class="c1"># Alfred Preferences &gt; Advanced &gt; Syncing:</span>
</span><span class='line'><span class="l-Scalar-Plain">dropbox</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">~/Dropbox/Alfred</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为MBProgressHUD添加取消功能]]></title>
    <link href="http://neater.github.io/blog/2015/03/25/wei-mbprogresshudtian-jia-qu-xiao-gong-neng/"/>
    <updated>2015-03-25T16:48:25+08:00</updated>
    <id>http://neater.github.io/blog/2015/03/25/wei-mbprogresshudtian-jia-qu-xiao-gong-neng</id>
    <content type="html"><![CDATA[<p>MBProgressHUD是一个显示HUD窗口的第三方类库，用于在执行一些后台任务时，在程序中显示一个表示进度的loading视图和两个可选的文本提示的HUD窗口。</p>

<p>在现实的需求中，可能存在这种情况：比如一个网络操作，在发送请求等待响应的过程中，我们会显示一个HUD窗口以显示一个loading框。但如果我们想在等待响应的过程中，在当前视图中取消这个网络请求，就没有相应的处理方式，MBProgressHUD没有为我们提供这样的交互操作。</p>

<p>简单看了下MBProgressHUD的源码，发现使用了NSOperationQueue来调度任务，便有了下面代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="nf">requestData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="n">self</span><span class="p">.</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[</span><span class="n">AFHTTPRequestOperationManager</span> <span class="n">manager</span><span class="p">];</span>
</span><span class='line'>  <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">tapRecognizer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="n">cancelRequest</span><span class="p">)];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">cancelRequest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">manager</span><span class="p">.</span><span class="n">operationQueue</span> <span class="n">cancelAllOperations</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android实用实践Part1: 架构]]></title>
    <link href="http://neater.github.io/blog/2015/03/18/androidshi-yong-shi-jian-part1/"/>
    <updated>2015-03-18T16:48:26+08:00</updated>
    <id>http://neater.github.io/blog/2015/03/18/androidshi-yong-shi-jian-part1</id>
    <content type="html"><![CDATA[<p>本文是这一系列的开篇，主要涉及一些基础环境设置，目的是能开发出及扩展、及维护和易测试的项目，而本系列将会涵盖一些模式和库，它们会或多或少改善让Android开发者的体验。</p>

<h1>场景</h1>

<p>本篇使用的Android项目救命，是个电影类别的原型，可以标记是否已经观看，影片的信息可以通过themoviedb提供的API获得，<a href="http://docs.themoviedb.apiary.io/">Apiary</a>上有相关的文档，这个工程基于MVP模式，遵循了Material Design，如转场、结构、动画、动画等。</p>

<p>Github上有示例代码，并配有视频。</p>

<p><img src="http://res.cloudinary.com/dttcwxrjo/image/upload/v1422988952/1_ntqfre.png" alt="" /></p>

<h1>架构:</h1>

<!--more-->


<p>正如前面所说，本项目基于的Model View Presenter是Model View Controller的变种。MVP试图抽取表示层中的逻辑，因为Android的Framework很容易把两者混合在数据层中，如Adapters或者CursorLoaders。</p>

<p>这种架构在修改视图时，不用修改逻辑层和数据层，这有既利于逻辑的重用又方便数据源的修改，比如将它从数据库更改为REST API。</p>

<h2>概观</h2>

<p>整个结构分为下面3层：</p>

<ul>
<li><strong>表示层</strong></li>
<li><strong>模型层</strong></li>
<li><strong>领域层</strong></li>
</ul>


<p><img src="http://res.cloudinary.com/dttcwxrjo/image/upload/v1422988949/0B62SZ3WRM2R2eGczcWh3MERkRGc-e1422883852292_hfs4r6.png" alt="" /></p>

<h3>表示层</h3>

<p>表示层负责显示图形界面并为提供要显示的内容。</p>

<h3>模型层</h3>

<p>表示层通常和领域逻辑联系，而模型层只负责提供数据，它可以连接数据库、REST API或者其它形式的持久化方式。</p>

<p>该层也实现了应用的实体，比如用来表示一部电影，一个类别等等。</p>

<h3>领域层</h3>

<p>领域层完全独立于表示层，应用的业务逻辑都归类在这里。</p>

<h2>实现</h2>

<p>下图显示了一个Android项目的目录结构（虚拟），模型层和领域层置于两个模块（module）中，而表示层出现在了app模块中，其它的模块包含了一些公用库和工具。
ps：app模块是Android工程模块。</p>

<p><img src="http://res.cloudinary.com/dttcwxrjo/image/upload/v1422988944/0B62SZ3WRM2R2elJfT0JiZnlTcE01_ospwxi.png" alt="" /></p>

<h3>领域模块</h3>

<p>领域模块包含了应用的业务逻辑，比如用户用例和一些实现。并且完全独立于Android的框架。它依赖于模型层和公共模块。
比如：从影片各个分类的排名榜中，找出是受欢迎的类别；对模型层提供的信息进行统计。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">project</span> <span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="n">common</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">project</span> <span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="n">model</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>模型模块</h3>

<p>负责管理数据（增、删、改、查）。在目前的1.0版本中，只有一些电影信息的API。它还实现了实体，比如用TvMovie类表示一部电影。现在它只依赖common模块，用来发起API调用，我还使用了Retrofit（Square开发），随后的文章中我会再谈谈Retrofit。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="err">&#39;</span><span class="o">:</span><span class="n">common</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">.</span><span class="na">retrofit</span><span class="o">:</span><span class="nl">retrofit:</span><span class="mf">1.9</span><span class="o">.</span><span class="mi">0</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>表示层模块</h3>

<p>其实就是一个Andorid应用本身了，比如一些资源、逻辑等。</p>

<p>它常常和业务逻辑交互，比如显示在某个时间点上显示所有电影的排期、获得某部影片的信息。
Presenter和视图也出现在这里。
每个Activity, Fragment, Dialog都实现了在MVPView接口中，声明了电影相关的显示、隐藏、绘制方法，任何与电影相关的表示层组件（Activity, Fragment, Dialog），都必须实现该接口。</p>

<p>下图示例,PopularMoviesView视图接口,声明了用来显示电影列表的一些方法，而在MoviesActivity中实现了这些方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PopularMoviesView</span> <span class="kd">extends</span> <span class="n">MVPView</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">showMovies</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">TvMovie</span><span class="o">&gt;</span> <span class="n">movieList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">showLoading</span> <span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">hideLoading</span> <span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">showError</span> <span class="o">(</span><span class="n">String</span> <span class="n">error</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">hideError</span> <span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MVP模式目的是让视图尽可能的简单，让presenter决定视图的行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MoviesActivity</span> <span class="kd">extends</span> <span class="n">ActionBarActivity</span> <span class="kd">implements</span>
</span><span class='line'>    <span class="n">PopularMoviesView</span><span class="o">,</span> <span class="o">...</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">PopularShowsPresenter</span> <span class="n">popularShowsPresenter</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RecyclerView</span> <span class="n">popularMoviesRecycler</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ProgressBar</span> <span class="n">loadingProgressBar</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MoviesAdapter</span> <span class="n">moviesAdapter</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TextView</span> <span class="n">errorTextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">popularShowsPresenter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PopularShowsPresenterImpl</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">popularShowsPresenter</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">popularShowsPresenter</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Context</span> <span class="nf">getContext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showMovies</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">TvMovie</span><span class="o">&gt;</span> <span class="n">movieList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">moviesAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MoviesAdapter</span><span class="o">(</span><span class="n">movieList</span><span class="o">);</span>
</span><span class='line'>        <span class="n">popularMoviesRecycler</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">moviesAdapter</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showLoading</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">loadingProgressBar</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hideLoading</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">loadingProgressBar</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showError</span><span class="o">(</span><span class="n">String</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">errorTextView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">errorTextView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">error</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">hideError</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">errorTextView</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">GONE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的示例中，都是由presenters来执行，负责接收事件并管理视图的行为。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PopularShowsPresenterImpl</span> <span class="kd">implements</span> <span class="n">PopularShowsPresenter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">PopularMoviesView</span> <span class="n">popularMoviesView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">PopularShowsPresenterImpl</span><span class="o">(</span><span class="n">PopularMoviesView</span> <span class="n">popularMoviesView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">popularMoviesView</span> <span class="o">=</span> <span class="n">popularMoviesView</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">popularMoviesView</span><span class="o">.</span><span class="na">showLoading</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Usecase</span> <span class="n">getPopularShows</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GetMoviesUsecaseController</span><span class="o">(</span><span class="n">GetMoviesUsecase</span><span class="o">.</span><span class="na">TV_MOVIES</span><span class="o">);</span>
</span><span class='line'>        <span class="n">getPopularShows</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPopularMoviesReceived</span><span class="o">(</span><span class="n">PopularMoviesApiResponse</span> <span class="n">popularMovies</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">popularMoviesView</span><span class="o">.</span><span class="na">hideLoading</span><span class="o">();</span>
</span><span class='line'>        <span class="n">popularMoviesView</span><span class="o">.</span><span class="na">showMovies</span><span class="o">(</span><span class="n">popularMovies</span><span class="o">.</span><span class="na">getResults</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>通讯</h3>

<p>这里也选用了<strong>消息队列</strong>，它既让广播事件变得好用又能方便组件间的通讯，从上面的例子就能看得出来。
事件会发往一个队列，所有订阅这一事件的类都会接收到这一事件。这一系统降低了模块间的耦合。</p>

<p>我采用了<strong>Square</strong>开发的<strong>Otto</strong>库来实现这个系统</p>

<p>我声明了2个队列，一个用来和REST API通讯，另一个则向presentation层发送事件。</p>

<p><code>REST_BUS</code>在另一个线程中处理事件，而<code>UI_BUS</code>则在默认线程中发送事件，也就是主线程。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BusProvider</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Bus</span> <span class="n">REST_BUS</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bus</span><span class="o">(</span><span class="n">ThreadEnforcer</span><span class="o">.</span><span class="na">ANY</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Bus</span> <span class="n">UI_BUS</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bus</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">BusProvider</span><span class="o">()</span> <span class="o">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Bus</span> <span class="nf">getRestBusInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">REST_BUS</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Bus</span> <span class="nf">getUIBusInstance</span> <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">UI_BUS</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>BusProvider类放置在common模块中，因为所有模块都要和它进行数据交换。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="err">&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">squareup</span><span class="o">:</span><span class="nl">otto:</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">5</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后来看一个例子，用户打开应用查看最受欢迎的影片列表。</p>

<p>在<code>onCreate</code>方法中，presenter<strong>subscribe</strong>了<code>UI_BUS</code>发出的事件，并且在<code>onStop</code>被调用时，进行对应的unsubscribe操作，然后presenter调用了GetMoviesUseCase。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BusProvider</span><span class="o">.</span><span class="na">getUIBusInstance</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Usecase</span> <span class="n">getPopularShows</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GetMoviesUsecaseController</span><span class="o">(</span><span class="n">GetMoviesUsecase</span><span class="o">.</span><span class="na">TV_MOVIES</span><span class="o">);</span>
</span><span class='line'>    <span class="n">getPopularShows</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BusProvider</span><span class="o">.</span><span class="na">getUIBusInstance</span><span class="o">().</span><span class="na">unregister</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>要接收事件，presenter必须实现相应的方法，并且遵循下面的约定：</p>

<ul>
<li>方法中的参数类型要和发送时事件的类型相同</li>
<li>使用@Subscribe注解</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Subscribe</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPopularMoviesReceived</span><span class="o">(</span><span class="n">PopularMoviesApiResponse</span> <span class="n">popularMovies</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">popularMoviesView</span><span class="o">.</span><span class="na">hideLoading</span><span class="o">();</span>
</span><span class='line'>    <span class="n">popularMoviesView</span><span class="o">.</span><span class="na">showMovies</span><span class="o">(</span><span class="n">popularMovies</span><span class="o">.</span><span class="na">getResults</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>相关资源:</h3>

<ul>
<li><a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/">Architecting Android…The clean way?</a> &ndash; Fernando Cejas</li>
<li><a href="https://github.com/pedrovgs/EffectiveAndroidUI">Effective Android UI</a> &ndash; Pedro Vicente Gómez Sanchez</li>
<li><a href="http://csaba.palfi.me/reactive-and-buses-for-mobile/">Reactive programming and message buses for mobile</a> &ndash; Csaba Palfi</li>
<li><a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">The clean architecturel</a> &ndash; Uncle Bob</li>
<li><a href="http://antonioleiva.com/mvp-android/">MVP Android</a> &ndash; Antonio Leiva</li>
</ul>


<p>译自：<a href="http://saulmm.github.io/2015/02/02/A%20useful%20stack%20on%20android%20%231,%20architecture/">A useful stack on android #1, architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中的Hit-Testing]]></title>
    <link href="http://neater.github.io/blog/2015/03/11/ioszhong-de-hit-testin/"/>
    <updated>2015-03-11T16:15:49+08:00</updated>
    <id>http://neater.github.io/blog/2015/03/11/ioszhong-de-hit-testin</id>
    <content type="html"><![CDATA[<p>Hit-Testing决定了一个触控点是否和屏幕上的视图相关，iOS使用Hit-testing找到最前端的并且该视图能够接收用户触碰产生的事件。这背后的实现采用了reverse pre-order depth-first遍历算法。</p>

<p>解释Hit-Testing原理之前，先来看看它产生的时机，下面的示意图说明了一次touch从手指触碰屏幕到离开的过程
<img src="http://smnh.me/images/hit-test-touch-event-flow.png" alt="" /></p>

<!--more-->


<p>如图所示，每次触屏都会产生hit-testing，并且在相应的视图或者手势识别器接收<code>UIEvent</code>事件之前产生的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>注意：由于未知的原因，hit-testing接连产生多产，而确定的hit-test view 保持不变。</span></code></pre></td></tr></table></div></figure>


<p>hit-testing完成后，找到了触碰点在其上面并处在最前端的视图。该视图会接收所有阶段（开始、移动、结束或者取消）的UITouch事件，当然它的手势识别器和子视图也可以和这些事件产生关联，然后，hit-test就开始接收一系列的UItouch事件了。</p>

<p>有一点要注意，即使手指从hit-test视图移到移动到另一个视图上，hit-test视图仍然会继续收到touch事件，直到该组touch结束</p>

<blockquote><p>“The touch object is associated with its hit-test view for its lifetime, even if the touch later moves outside the view.”</p>

<p><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW4">Event Handling Guide for iOS, iOS Developer Library</a></p></blockquote>

<p>As mentioned earlier the hit-testing uses depth-first traversal in reverse pre-order (first visiting the root node and then traversing its subtrees from higher to lower indexes). This kind of traversal allows reducing the number of traversal iterations and stopping the search process once the first deepest descendant view that contains the touch-point is found. This is possible since a subview is always rendered in front of its superview and sibling view is always rendered in front of its sibling views with a lower index into the subviews array. Such that, when multiple overlapping views contain specific point, the deepest view in the rightmost subtree will be the frontmost view.</p>

<blockquote><p>“Visually, the content of a subview obscures all or part of the content of its parent view. Each superview stores its subviews in an ordered array and the order in that array also affects the visibility of each subview. If two sibling subviews overlap each other, the one that was added last (or was moved to the end of the subview array) appears on top of the other.”</p>

<p><a href="https://developer.apple.com/library/ios/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/WindowsandViews/WindowsandViews.html#//apple_ref/doc/uid/TP40009503-CH2-SW24">View Programming Guide for iOS, iOS Developer Library</a></p></blockquote>

<p>下图显示了一个视图继承树并展示与其对应的真机模拟图。从左至右的的排列方式显示出了子视图的排列关系（右边的视图离用户越近）。</p>

<p><img src="http://smnh.me/images/hit-test-view-hierarchy.png" alt="view hierarchy tree" /></p>

<p>As it can be seen, “View A” and “View B” as well as their children, “View A.2” and “View B.1”, are overlapping. But since “View B” has a subview index higher than that of “View A”, “View B” and its subviews are rendered above “View A” and its subviews. Therefore, “View B.1” should be returned by hit-testing when user’s finger touches “View B.1” in the area where it overlaps with “View A.2”.</p>

<p>By applying depth-first traversal in reverse pre-order allows stopping the traversal once the first deepest descendant view that contains the touch-point is found:</p>

<p><img src="http://smnh.me/images/hit-test-depth-first-traversal.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发最佳实践]]></title>
    <link href="http://neater.github.io/blog/2014/11/21/ioskai-fa-zui-jia-shi-jian/"/>
    <updated>2014-11-21T11:49:45+08:00</updated>
    <id>http://neater.github.io/blog/2014/11/21/ioskai-fa-zui-jia-shi-jian</id>
    <content type="html"><![CDATA[<p>和软件一样，这篇文章离不开大家的贡献，哪怕打开一个Issue或者发一个PR。</p>

<p>如果对Android感兴趣，请看这里 <a href="https://github.com/futurice/android-best-practices">Android开发最佳实践</a></p>

<h2>起因</h2>

<p>遗憾地是，iOS开发的门槛挺高的，Swift和Objective-C都没有在iOS/Mac以外的系统广泛使用，而且有自己的命名方式，想让代码跑在苹果的设备上并不容易（译者注：各种编译和开发环境问题），不论你刚接触Cocoa还是对iOS开发最佳实践感兴趣，都能在这里找到答案。下面列出的只是一些建议，如果你有更好的实践可以进行相应的替换。</p>

<h2>开始</h2>

<h3>Xcode</h3>

<p>Xcode是绝大多数iOS开发者选择的IDE，并且是苹果官方唯一支持的。当然也有其它的，AppCode可以说其中最著名的，不过如果你还不是一个iOS开发的老手，还是使用Xcode吧，不管怎么样，它在可用性方面还是不错的。</p>

<p>可以在Mac App Store下载最新的SDK和模拟器，在Preferences > Downloads中可以下载更多的文档。</p>

<h3>项目设置</h3>

<p>刚开始开发iOS项目有个很常见的问题，纯代码?Storybard?还是XIB，用哪一个来开发UI，Both are known to occasionally result in working software。但是，还要从下面几个方面来考虑：</p>

<h4>纯代码？</h4>

<ul>
<li>Xcode5中，通用型App使用不同的Storyboard区分iPhone和iPad，这导致了许多不必要的重复，Xcode6引入了Size Classes来解决这个问题。</li>
<li>Xcode5中，Storyboard不支持自定义字体和UI元素， but will have a generic appearance instead，Xcode6再次解决了它。</li>
<li>Storyboard使用了复杂的XML，在版本控制中，更容易产生冲突。</li>
</ul>


<h4>Storyboards?</h4>

<ul>
<li>or the less technically inclined, Storyboards在操作方式上做的最好，比如，直接修改颜色或者布局约束，当然这需要一些时间来学习。</li>
</ul>


<h3>Ignores</h3>

<p>把项目加入版本控制的时候，最好也加入.gitignore文件，这样不会把不需要的文件（用户自己的配置和临时文件等）加入。幸运地是，GitHub已经为我们提供了<a href="https://github.com/github/gitignore/blob/master/Objective-C.gitignore">Objective-C</a>和<a href="https://github.com/github/gitignore/blob/master/Swift.gitignore">Swift</a>的版本(译者注：还有个好用的网站，<a href="https://www.gitignore.io/">gitignore.io</a>)</p>

<!--more-->


<h3>CocoaPods</h3>

<p>在管理第三方库方面，CocoaPods无疑首当其冲，安装的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install cocoapods</span></code></pre></td></tr></table></div></figure>


<p>进入项目主目录，运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod init</span></code></pre></td></tr></table></div></figure>


<p>这会生成Podfile文件，统一进行管理依赖，再运行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>


<p>主工程和这些第三方库组成的库会放置在Workspace中，这以后，要通过.xcworkspace而不是.xcproject来打开项目，否则会产生编译错误。</p>

<h3>工程结构</h3>

<p>随着源文件日益增多，项目目录越发凌乱，有必要将它们按用途分类，下面是一个实例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├─ Models
</span><span class='line'>├─ Views
</span><span class='line'>├─ Controllers
</span><span class='line'>├─ Stores
</span><span class='line'>├─ Helpers</span></code></pre></td></tr></table></div></figure>


<p>First, create them as groups (little yellow &ldquo;folders&rdquo;) within the group with your project&rsquo;s name in Xcode&rsquo;s Project Navigator. Then, for each of the groups, link them to an actual directory in your project path by opening their File Inspector on the right, hitting the little gray folder icon, and creating a new subfolder with the name of the group in your project directory.</p>

<h2>网络</h2>

<h3>传统方式：使用自定义回调Block</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GigStore.h</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">^</span><span class="n">FetchGigsBlock</span><span class="p">)(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">gigs</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">fetchGigsForArtist:</span><span class="p">(</span><span class="n">Artist</span> <span class="o">*</span><span class="p">)</span><span class="nv">artist</span> <span class="nf">completion:</span><span class="p">(</span><span class="n">FetchGigsBlock</span><span class="p">)</span><span class="nv">completion</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// GigsViewController.m</span>
</span><span class='line'>
</span><span class='line'><span class="p">[[</span><span class="n">GigStore</span> <span class="n">sharedStore</span><span class="p">]</span> <span class="nl">fetchGigsForArtist:</span><span class="n">artist</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">gigs</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Do something with gigs</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// :(</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but can quickly lead to callback hell if you need to chain multiple requests. In that case, have a look at ReactiveCocoa (RAC). It&rsquo;s a versatile and multi-purpose library that can change the way people write entire apps, but you can also use it sparingly where it fits the task.</p>

<p>There are good introductions to the concept of RAC (and FRP in general) on Teehan+Lax and NSHipster.</p>

<h3>Reactive方式: 使用RAC signals</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// GigStore.h</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">RACSignal</span> <span class="o">*</span><span class="p">)</span><span class="nf">gigsForArtist:</span><span class="p">(</span><span class="n">Artist</span> <span class="o">*</span><span class="p">)</span><span class="nv">artist</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// GigsViewController.m</span>
</span><span class='line'>
</span><span class='line'><span class="p">[[</span><span class="n">GigStore</span> <span class="n">sharedStore</span><span class="p">]</span> <span class="nl">gigsForArtist:</span><span class="n">artist</span><span class="p">]</span>
</span><span class='line'>    <span class="nl">subscribeNext:</span><span class="o">^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">gigs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Do something with gigs</span>
</span><span class='line'>    <span class="p">}</span> <span class="nl">error:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// :(</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过将gig的signal和其它signal组合，在显示之前，我们可以转换或者过滤掉gips。</p>

<h3>结构化</h3>

<p>Pragma marks能够很好地将方法进行分组归类，尤其在View controller文件中，下面是一些常用的分组结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;SomeModel.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;SomeView.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;SomeController.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;SomeStore.h&quot;</span>
</span><span class='line'><span class="cp">#import &quot;SomeHelper.h&quot;</span>
</span><span class='line'><span class="cp">#import &lt;SomeExternalLibrary/SomeExternalLibraryHeader.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">XYZFooStringConstant</span> <span class="o">=</span> <span class="s">@&quot;FoobarConstant&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="n">CGFloat</span> <span class="k">const</span> <span class="n">XYZFooFloatConstant</span> <span class="o">=</span> <span class="mf">1234.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">XYZFooViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">XYZBarDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">XYZFooViewController</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Lifecycle</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithFoo:</span><span class="p">(</span><span class="n">Foo</span> <span class="o">*</span><span class="p">)</span><span class="nv">foo</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - View Lifecycle</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Auto Layout</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">makeViewConstraints</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Public Interface</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startFooing</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">stopFooing</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - User Interaction</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foobarButtonTapped</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - XYZFoobarDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foobar:</span><span class="p">(</span><span class="n">Foobar</span> <span class="o">*</span><span class="p">)</span><span class="nv">foobar</span> <span class="nf">didSomethingWithFoo:</span><span class="p">(</span><span class="n">Foo</span> <span class="o">*</span><span class="p">)</span><span class="nv">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Internal Helpers</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">displayNameForFoo:</span><span class="p">(</span><span class="n">Foo</span> <span class="o">*</span><span class="p">)</span><span class="nv">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>最重要的是在工程中的所有文件保持上面的一致性。</p>

<h2>部署</h2>

<p>iOS上部署并不方便，话虽如此, 了解下面几点会很有帮助的。</p>

<p>每当你想将开发的App安装的真实设备而非模拟器时，都需要用苹果颁发的证书对其签名。每个证书都对应着一对公钥/私钥，私钥存储在Mac中的钥匙链中，证书有2种形式：</p>

<ul>
<li>开发证书：团队中的每个开发者都有属于自己的，根据需要生成。在开发调试时需要这种证书，最好由我们手动进行选择设置，而不是让Xcode中的&#8221;Fix issue&#8221; 来帮我们解决问题。</li>
<li>发布证书：可以有多个，但最好每个组织保持一个，通过某种方式共享私钥，这种证书用于提前到App Store或者企业内部的发布系统。</li>
</ul>


<p>除了证书，还有Provisioning配置文件，用于连接设备和证书，也有开发和发布2种形式：
&ndash; 开发provisioning：包含所有被受权安装的设备列表，该文件也能对应多个开发证书，意味着多个开发者可以使用它，可以将它用于专有App，但最常用的用途是将它以wildcard的形式共享于多个App，当然App ID必须以通配符*结尾。
&ndash; 分发provisioning：根据用途有3种发布方式，每种provisioning都对应一个发布证书，证书如果过期，它也将无效。</p>

<pre><code>- Ad-Hoc: 如同开发provisioning，它有个可安装设备列表的白名单，这种provisioning常用于Beta测试（TestFlight）。由于TestFlight被苹果收购，2014年底这种方式可能会有所变化。
- App Store: 该provisioning没有设备列表，任何人都能在App Store上安装它，所有在App Store上发布的应用都要用到它。
- Enterprise: 它也没有设备白名单，任何访问企业内部发布网站的人都能下载安装它，该provisioning仅适用于企业开发账号。
</code></pre>

<p>要想同步所有证书和provisioning，需要在Xcode中打开Accounts标签，添加开发者账号，然后双击Team名称，底部将会出现刷新按钮，但有时需要重启Xcde才会生效。</p>

<h2>More Ideas</h2>

<ul>
<li><a href="https://github.com/vsouza/awesome-ios">https://github.com/vsouza/awesome-ios</a></li>
<li>Update for Xcode 6

<ul>
<li>No automatic precompiled header</li>
</ul>
</li>
<li>Pod usage: pod install vs pod update</li>
<li>iTunes Connect etc.</li>
<li>3x assets, iPhone 6 screen sizes explained</li>
<li>Add @interface and constants to VC Structure</li>
<li>Add list of suggested compiler warnings</li>
<li>Ask IT about automated Jenkins build machine</li>
<li>Add section on Testing</li>
<li>Add section on Debugging, e.g. exception breakpoints</li>
<li>Add &ldquo;proven don&#8217;ts</li>
</ul>


<p>译自：<a href="https://github.com/futurice/ios-good-practices">iOS Good Practices</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全栈开发者的潮起潮落]]></title>
    <link href="http://neater.github.io/blog/2014/11/11/quan-zhan-kai-fa-zhe-de-chao-qi-chao-luo/"/>
    <updated>2014-11-11T17:16:03+08:00</updated>
    <id>http://neater.github.io/blog/2014/11/11/quan-zhan-kai-fa-zhe-de-chao-qi-chao-luo</id>
    <content type="html"><![CDATA[<p>貌似今天的技术都迷恋全栈的开发者。全栈可能在Web2.0时代是可能的，但新一代的创业公司的涌现打破了许多限制。从机器智能预测推计算数据分析移动/可穿戴等等，全栈变得几乎不可能了。</p>

<p>上世纪70年代末至80年代初，还是孩子的我便开始为早期移动端和网站编程，那时独立开发一个软件是很普遍的，程序员和硬件之间也没有很多的层。在8位处理器和有限的内存环境下，程序员使用汇编语言尽可能地提升运行的性能和空间。</p>

<p>80年代末至90年代初，随着C/S模型的到来，很快软件开发演变成了一种团队合作，而90年代末至新世纪初的互联网浪潮则加速了这一进程。新进的技术进一步提高了复杂度，管理一个商业网站需要具备多种技能（比如前端、数据库、应用服务器等）的专业人员精通网络设备的操作、路由器和负载均衡原理、Java虚拟机调优、各种数据库的索引机制。</p>

<p>00年代中期开始，任何项目的开发成本都变的非常高，从简单的网站到新一代SaaS服务，这直接增加了开发中各个层之间的沟通成本甚至还会造成沟通障碍，项目中的层数也增加了不少，直接增加了部署的难度。 正如Marc Andreessen针对最近tweet的烧钱风波（译者猜测是狂招人吧）指出：开发人员的增加极大增加了沟通成本，只会导致效率的降低。</p>

<p>与之相反，新一代Web2.0技术变得日益简单和无缝。使用J2EE及Oracle的程序员切换到了更加一体化的LAMP（Linux, Apache, MySQL, PHP/Python/Perl）。新的语言及其框架（Django and Ruby on Rails）在网站和数据库之间封装相应的层来完成自动化。前端框架（jQuery）提供抽象层使开发者不用关心具体的浏览器。云服务（Amazon Web Services）简化部署并提供一致的网络。</p>

<p>00年代后期，许多程序员都能独自交付一个消费类或SaaS网站，包括动态网络客户端，以及负责商业逻辑的服务端，数据库的开发、布署以及运维。这新一代全栈开发者可以完全胜任需要过去一个团队才能完成的任务。当新加入的全线开发者为项目开发一个新的功能，将不可避免地涉及项目的各个层，</p>

<p><img src="https://tctechcrunch2011.files.wordpress.com/2014/10/image2.png?w=1248&amp;h=832" alt="skill1" /></p>

<p>如果你要使用上图中的技术来搭建网站，需要找到能够胜任的程序员。不久之后我觉得不切实际，因为这是并不是全栈开发者，下面的才是：
<img src="https://tctechcrunch2011.files.wordpress.com/2014/10/image-1.png?w=1248&amp;h=832" alt="skill2" /></p>

<p>我敢打赌，没人能精通所有这些领域，并开发相应的应用，因为要精通每一个领域及其API都是一个全职工作。</p>

<p>我们正处于复杂技术的变迁中，每个技术层都需要相关专家。开发Android&amp;iOS App需要理解各自平台的特性。使用Amazon的云服务运行一个应用，需要熟悉它的各种服务，才能应付各种事故。甚至前端技能的CSS都到了CSS4，JSON&amp;JavaScript也出现了MVC框架，Angular.js &amp; Backbone.js.</p>

<p>在这勇敢的新世界，一种人成为了关键，他除了精通至少一个层，还要能连接其余的层，并能和各层的专家合作开发新的功能并交付。换言之，他能够连接各个层以及设计整体的架构，这样的人很可能是一个或几个层的专家，相比全栈开发者，我们更需要全栈集成者。</p>

<p>安息吧，全栈开发者，我们应该欢迎全栈集成者，除了某些特殊领域需要具备高超技术的工程师外，软件使世界变得更加美好，其中自然少不了你们。</p>

<p>译自：
<a href="http://techcrunch.com/2014/11/08/the-rise-and-fall-of-the-full-stack-developer/">The Rise And Fall Of The Full Stack Developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Tips]]></title>
    <link href="http://neater.github.io/blog/2014/09/29/git-tips/"/>
    <updated>2014-09-29T16:19:27+08:00</updated>
    <id>http://neater.github.io/blog/2014/09/29/git-tips</id>
    <content type="html"><![CDATA[<p>取消一次 git merge，比方说刚才执行了 git merge dev，发现各种崩溃，一大堆 conflict，想取消掉，那么就执行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --merge dev </span></code></pre></td></tr></table></div></figure>


<p>显示某个作者的提交</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log --name-status --author="[The Author's Name]" </span></code></pre></td></tr></table></div></figure>


<p>从仓库取出file覆盖当前分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout branch|tag|commit -- file_name</span></code></pre></td></tr></table></div></figure>


<p>从暂存区去除文件覆盖工作区</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -- .</span></code></pre></td></tr></table></div></figure>


<h2>Branch</h2>

<p>查看各个分支最后一个提交对象的信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -v</span></code></pre></td></tr></table></div></figure>


<p>查看已经合并到当前分支的分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch --merge</span></code></pre></td></tr></table></div></figure>


<p>查看未合并到当前分支的分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch --no-merge</span></code></pre></td></tr></table></div></figure>


<p>基于dev新建test分支，并切换</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b test dev</span></code></pre></td></tr></table></div></figure>


<h2>Others</h2>

<p>停止追逐现在已经追踪的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rm --cached</span></code></pre></td></tr></table></div></figure>


<p>返回一个简单版的git status,为默认git status来减少噪音。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git status -s</span></code></pre></td></tr></table></div></figure>


<p>显示提交记录的参与者列表。和GitHub的参与者列表相同。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git shortlog -sn</span></code></pre></td></tr></table></div></figure>


<blockquote><p>git shortlog -sn</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa and Swift]]></title>
    <link href="http://neater.github.io/blog/2014/09/24/reactivecocoa-and-swift/"/>
    <updated>2014-09-24T15:21:40+08:00</updated>
    <id>http://neater.github.io/blog/2014/09/24/reactivecocoa-and-swift</id>
    <content type="html"><![CDATA[<p>Swift可以和Objective-C相互调用，所以，在用Swift编写的App中，可以直接使用Reactivecocoa。</p>

<p>尽管如此，</p>

<h3>Signals in Swift</h3>

<p>通过桥接，ReactiveCocoa的API从Objective-C的块过渡到了Swift的闭包，来看一个例子，下面的Objective-C代码subscribe了UITextfield的<code>rac_textSignal</code>，用来查看当前的length。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">searchTextField</span><span class="o">.</span><span class="n">rac_textSignal</span> <span class="ss">subscribeNext</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="nb">id</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">NSString</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="p">(</span><span class="no">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="no">NSLog</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当在这个UITextfield中依次输入0 1 2 3 4 5时，Console中显示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然了，为了避免显示转换，可以把上面的Block签名中的参数类型，从<code>id</code>改为<code>NSString</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">searchTextField</span><span class="o">.</span><span class="n">rac_textSignal</span> <span class="ss">subscribeNext</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="no">NSString</span> <span class="o">*</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">NSLog</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>与之对应的Swift代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">searchTextField</span><span class="o">.</span><span class="n">rac_textSignal</span><span class="p">()</span><span class="o">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="k">next</span><span class="ss">:AnyObject!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">let</span> <span class="n">text</span> <span class="o">=</span> <span class="k">next</span> <span class="n">as?</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">countElements</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不幸的是，当Swift和Objective-C进行调用的时候，会经常用到<code>as</code>操作符，从而变得更复杂了，我们不能进行显示转换，Swift生硬地插入了必须的类型为<code>(AnyObject!) -&gt; ()</code>的函数。</p>

<p>也可以使用<code>if-let</code>条件语句进行简化，因为<code>AnyObject</code>在当前情况下可以视为字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">searchTextField</span><span class="o">.</span><span class="n">rac_textSignal</span><span class="p">()</span><span class="o">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="k">next</span><span class="ss">:AnyObject!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">text</span> <span class="o">=</span> <span class="k">next</span> <span class="n">as</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">countElements</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，这仍然还是要比Objective-C的版本复杂。
还好有解决这个问题的方案！针对<code>RACSignal</code>进行扩展，把传入函数参数类型进行必须的转换:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">extension</span> <span class="no">RACSignal</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">subscribeNextAs</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="ss">nextClosure</span><span class="p">:(</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">(</span><span class="k">next</span><span class="p">:</span> <span class="no">AnyObject</span><span class="o">!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">let</span> <span class="n">nextAsT</span> <span class="o">=</span> <span class="k">next</span> <span class="n">as</span> <span class="n">T</span>
</span><span class='line'>      <span class="n">nextClosure</span><span class="p">(</span><span class="n">nextAsT</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码使用泛型进行类型转换，参数T的类型通过实际传入的参数进行推断，这引出了一些有趣的语法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">searchTextField</span><span class="o">.</span><span class="n">rac_textSignal</span><span class="p">()</span><span class="o">.</span><span class="n">subscribeNextAs</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">text</span><span class="p">:</span><span class="nb">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">countElements</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<h3>Bindings</h3>

<p>ReactiveCocoa有一些宏用来绑定属性到signals，下面的代码，把viewModel的<code>searchText</code>属性绑定到一个UITextfield的<code>rac_textSignal</code>属性，当UITextfield中的内容更新了，这个signal忽略当前值，把新的值更新到viewModel的searchText</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RAC</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">viewModel</span><span class="p">,</span> <span class="n">searchText</span><span class="p">)</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">searchTextField</span><span class="o">.</span><span class="n">rac_textSignal</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift不支持宏，当然不能使用<code>RAC</code>了。
下面的struct和operator替代了RAC macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="n">a</span> <span class="n">struct</span> <span class="n">that</span> <span class="n">replaces</span> <span class="n">the</span> <span class="no">RAC</span> <span class="n">macro</span>
</span><span class='line'><span class="n">struct</span> <span class="no">RAC</span>  <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">target</span> <span class="p">:</span> <span class="no">NSObject</span><span class="o">!</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">keyPath</span> <span class="p">:</span> <span class="nb">String</span><span class="o">!</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">nilValue</span> <span class="p">:</span> <span class="no">AnyObject</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="ss">target</span><span class="p">:</span> <span class="no">NSObject</span><span class="o">!</span><span class="p">,</span> <span class="n">_</span> <span class="ss">keyPath</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">nilValue</span><span class="p">:</span> <span class="no">AnyObject</span><span class="p">?</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">target</span> <span class="o">=</span> <span class="n">target</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">keyPath</span> <span class="o">=</span> <span class="n">keyPath</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">nilValue</span> <span class="o">=</span> <span class="n">nilValue</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">func</span> <span class="n">assignSignal</span><span class="p">(</span><span class="n">signal</span> <span class="p">:</span> <span class="no">RACSignal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">signal</span><span class="o">.</span><span class="n">setKeyPath</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">keyPath</span><span class="p">,</span> <span class="ss">onObject</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">target</span><span class="p">,</span> <span class="ss">nilValue</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">nilValue</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">operator</span> <span class="n">infix</span> <span class="o">~&gt;</span> <span class="p">{}</span>
</span><span class='line'><span class="vi">@infix</span> <span class="n">func</span> <span class="o">~&gt;</span> <span class="p">(</span><span class="ss">signal</span><span class="p">:</span> <span class="no">RACSignal</span><span class="p">,</span> <span class="ss">rac</span><span class="p">:</span> <span class="no">RAC</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">rac</span><span class="o">.</span><span class="n">assignSignal</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">searchTextField</span><span class="o">.</span><span class="n">rac_textSignal</span><span class="p">()</span> <span class="o">~&gt;</span> <span class="no">RAC</span><span class="p">(</span><span class="n">viewModel</span><span class="p">,</span> <span class="s2">&quot;searchText&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>重写<code>RACObserve</code>宏显得容易些</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="no">RACObserve</span><span class="p">(</span><span class="ss">target</span><span class="p">:</span> <span class="no">NSObject</span><span class="o">!</span><span class="p">,</span> <span class="ss">keyPath</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">RACSignal</span>  <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">target</span><span class="o">.</span><span class="n">rac_valuesForKeyPath</span><span class="p">(</span><span class="n">keyPath</span><span class="p">,</span> <span class="ss">observer</span><span class="p">:</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Cool Stuff!</h3>

<p>我喜欢把已有的App移植一点一点地移植到Swift，为了减少Flickr的API调用，当photo显示一秒后，再调用相应的API获得相应的元数据(评论、点赞数)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="n">a</span> <span class="n">signal</span> <span class="n">that</span> <span class="n">emits</span> <span class="n">events</span> <span class="k">when</span> <span class="n">visibility</span> <span class="n">changes</span>
</span><span class='line'><span class="n">let</span> <span class="n">visibleStateChanged</span> <span class="o">=</span> <span class="no">RACObserve</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="s2">&quot;isVisible&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="n">filtered</span> <span class="n">into</span> <span class="n">visible</span> <span class="ow">and</span> <span class="n">hidden</span> <span class="n">signals</span>
</span><span class='line'><span class="n">let</span> <span class="n">visibleSignal</span> <span class="o">=</span> <span class="n">visibleStateChanged</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="vg">$0</span><span class="o">.</span><span class="n">boolValue</span> <span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">hiddenSignal</span> <span class="o">=</span> <span class="n">visibleStateChanged</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="o">!</span><span class="vg">$0</span><span class="o">.</span><span class="n">boolValue</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span> <span class="n">a</span> <span class="n">signal</span> <span class="n">that</span> <span class="n">emits</span> <span class="k">when</span> <span class="n">an</span> <span class="n">item</span> <span class="n">has</span> <span class="n">been</span> <span class="n">visible</span> <span class="k">for</span> <span class="mi">1</span> <span class="n">second</span>
</span><span class='line'><span class="n">let</span> <span class="n">fetchMetadata</span> <span class="o">=</span> <span class="n">visibleSignal</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">takeUntil</span><span class="p">(</span><span class="n">hiddenSignal</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">fetchMetadata</span><span class="o">.</span><span class="n">subscribeNext</span> <span class="p">{</span>
</span><span class='line'>  <span class="sr">//</span> <span class="n">fetch</span> <span class="n">the</span> <span class="n">meta</span><span class="o">-</span><span class="n">data</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码监听viewModel的<code>isVisible</code>属性，当photo显示或隐藏时产生信号来发出相应的事件，通过组合的方式，延时一秒后产生一个信号来获得元数据。酷！</p>

<h3>Conclusions</h3>

<p>把app从Objectiv-C移植到Swift是很有趣的，有些地方显得有些让人困惑，但我认为，一般说来Swift的这种编程范式将来会变得越来越容易。</p>

<p>译自 <a href="http://www.scottlogic.com/blog/2014/07/24/mvvm-reactivecocoa-swift.html">
MVVM, Swift and ReactiveCocoa &ndash; It&rsquo;s all good!
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100个iOS开发者需要关注的资源]]></title>
    <link href="http://neater.github.io/blog/2014/08/04/100ge-ioskai-fa-zhe-xu-yao-guan-zhu-de-zi-yuan/"/>
    <updated>2014-08-04T10:41:58+08:00</updated>
    <id>http://neater.github.io/blog/2014/08/04/100ge-ioskai-fa-zhe-xu-yao-guan-zhu-de-zi-yuan</id>
    <content type="html"><![CDATA[<p>iOS App的市场无疑获得了极大的增长，当然少不了平台流行的功劳。下面的的资源，对App开发感兴趣的人是很有帮助的。</p>

<p>无论是在App Store推广你的App，还是设计一款漂亮的App，这些书、工具、社区绝对能帮助你。这100多个在线服务、社区、工具，帮助开发者更好的构思一款App并实现它，你所要做的就是好好使用它们。</p>

<h3>在线服务</h3>

<p><img src="http://dailytekk.com/wp-content/uploads/2014/02/unbabel.jpg" alt="Service" /></p>

<ol>
<li><a href="http://www.iubenda.com/en/mobile">Iubenda</a> &ndash; Mobile app privacy policy</li>
<li><a href="http://www.joppar.com/mobile-app-cms">Content</a> -Content management system for native iOS apps</li>
<li><a href="https://www.unbabel.co/">Unbabel</a> &ndash; App Localization</li>
<li><a href="http://joppar.com/mobile-app-feature-switching">Switch</a> -Toggle your app features off and on in real-time</li>
<li><a href="https://heatmaps.io/">Heatmaps</a> &ndash; iOS heatmap</li>
<li><a href="http://www.iubenda.com/en/mobile">Bitbucket</a> &ndash; Private code repositories</li>
<li><a href="http://www.iubenda.com/en/mobile">Media Toolkit</a> &ndash; Monitors mentions of your app</li>
<li><a href="http://www.iubenda.com/en/mobile">Alau.me</a> &ndash; Like bit.ly for apps</li>
<li><a href="http://www.iubenda.com/en/mobile">Ap Salar</a> &ndash; Data driven mobile ad platform</li>
<li><a href="http://www.iubenda.com/en/mobile">Google</a> &ndash; Mobile backend</li>
</ol>


<h3>社区</h3>

<p><img src="http://dailytekk.com/wp-content/uploads/2014/02/F9brVEii2vJ1V8psswIKt6gmaE2SxFV9yLsyeuCbBqQ.jpg" alt="Communities" /></p>

<ol>
<li><a href="https://plus.google.com/communities/112026628790708717979">iOS Developers Group</a> &ndash; iOS Google+ community</li>
<li><a href="http://ios.meetup.com/">iOS Meetup Groups</a> &ndash; Get together with like-minded people</li>
<li><a href="https://www.quora.com/iOS-Development/">iOS Development Quora</a> &ndash; iOS Development Quora group</li>
<li><a href="http://stackoverflow.com/questions/tagged/ios">iOS Stackoverflow</a> &ndash; iOS Stackoverflow group</li>
<li><a href="http://forum.iphone-developers.com/">iPhone Developer Forum</a> &ndash; iOS Dev Forums</li>
<li><a href="http://www.reddit.com/r/iOSProgramming/">iOS Programming</a> &ndash; iOS Reddit group</li>
<li><a href="http://cocoalit.com/">Cocoa Lit</a> &ndash; List of Cocoa tutorials</li>
<li><a href="http://nsscreencast.com/">NS Screencast</a> &ndash; iOS development screencasts</li>
<li><a href="http://iosdevelopertips.com/">iOS Developer Tips</a> &ndash; Tips and tutorials for iOS Developers</li>
<li><a href="https://clarity.fm/">Clarity.fm</a> &ndash; Call an expert for iOS help</li>
</ol>


<p>译自
<a href="http://dailytekk.com/2014/02/20/100-great-resources-for-ios-developers/">100 Great Resources for iOS Developers</a></p>
]]></content>
  </entry>
  
</feed>
